//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from cobol.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class cobolLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, DISPLAY=3, OF=4, WITH=5, NO=6, ADVANCING=7, IDENTIFIER=8, 
		INT=9, SPACE=10, DOT=11, LITERAL=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "DISPLAY", "OF", "WITH", "NO", "ADVANCING", "IDENTIFIER", 
		"INT", "SPACE", "DOT", "LITERAL", "LETTER", "DIGIT"
	};


	public cobolLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public cobolLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", null, null, null, null, null, null, null, null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "DISPLAY", "OF", "WITH", "NO", "ADVANCING", "IDENTIFIER", 
		"INT", "SPACE", "DOT", "LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "cobol.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static cobolLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,12,214,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,
		1,0,1,1,1,1,1,2,1,2,5,2,36,8,2,10,2,12,2,39,9,2,1,2,1,2,5,2,43,8,2,10,
		2,12,2,46,9,2,1,2,1,2,5,2,50,8,2,10,2,12,2,53,9,2,1,2,1,2,5,2,57,8,2,10,
		2,12,2,60,9,2,1,2,1,2,5,2,64,8,2,10,2,12,2,67,9,2,1,2,1,2,5,2,71,8,2,10,
		2,12,2,74,9,2,1,2,1,2,1,3,1,3,5,3,80,8,3,10,3,12,3,83,9,3,1,3,1,3,1,4,
		1,4,5,4,89,8,4,10,4,12,4,92,9,4,1,4,1,4,5,4,96,8,4,10,4,12,4,99,9,4,1,
		4,1,4,5,4,103,8,4,10,4,12,4,106,9,4,1,4,1,4,1,5,1,5,5,5,112,8,5,10,5,12,
		5,115,9,5,1,5,1,5,1,6,1,6,5,6,121,8,6,10,6,12,6,124,9,6,1,6,1,6,5,6,128,
		8,6,10,6,12,6,131,9,6,1,6,1,6,5,6,135,8,6,10,6,12,6,138,9,6,1,6,1,6,5,
		6,142,8,6,10,6,12,6,145,9,6,1,6,1,6,5,6,149,8,6,10,6,12,6,152,9,6,1,6,
		1,6,5,6,156,8,6,10,6,12,6,159,9,6,1,6,1,6,5,6,163,8,6,10,6,12,6,166,9,
		6,1,6,1,6,5,6,170,8,6,10,6,12,6,173,9,6,1,6,1,6,1,7,1,7,1,7,1,7,5,7,181,
		8,7,10,7,12,7,184,9,7,1,7,1,7,1,7,1,7,3,7,190,8,7,1,8,4,8,193,8,8,11,8,
		12,8,194,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,4,11,205,8,11,11,11,12,11,
		206,1,11,1,11,1,12,1,12,1,13,1,13,0,0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
		15,8,17,9,19,10,21,11,23,12,25,0,27,0,1,0,20,2,0,68,68,100,100,2,0,73,
		73,105,105,2,0,83,83,115,115,2,0,80,80,112,112,2,0,76,76,108,108,2,0,65,
		65,97,97,2,0,89,89,121,121,2,0,79,79,111,111,2,0,70,70,102,102,2,0,87,
		87,119,119,2,0,84,84,116,116,2,0,72,72,104,104,2,0,78,78,110,110,2,0,86,
		86,118,118,2,0,67,67,99,99,2,0,71,71,103,103,3,0,9,10,12,13,32,32,1,0,
		34,34,2,0,65,90,97,122,1,0,48,57,236,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
		0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
		1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,1,29,1,0,0,0,3,31,1,0,0,
		0,5,33,1,0,0,0,7,77,1,0,0,0,9,86,1,0,0,0,11,109,1,0,0,0,13,118,1,0,0,0,
		15,176,1,0,0,0,17,192,1,0,0,0,19,196,1,0,0,0,21,200,1,0,0,0,23,202,1,0,
		0,0,25,210,1,0,0,0,27,212,1,0,0,0,29,30,5,40,0,0,30,2,1,0,0,0,31,32,5,
		41,0,0,32,4,1,0,0,0,33,37,7,0,0,0,34,36,3,19,9,0,35,34,1,0,0,0,36,39,1,
		0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,40,1,0,0,0,39,37,1,0,0,0,40,44,7,
		1,0,0,41,43,3,19,9,0,42,41,1,0,0,0,43,46,1,0,0,0,44,42,1,0,0,0,44,45,1,
		0,0,0,45,47,1,0,0,0,46,44,1,0,0,0,47,51,7,2,0,0,48,50,3,19,9,0,49,48,1,
		0,0,0,50,53,1,0,0,0,51,49,1,0,0,0,51,52,1,0,0,0,52,54,1,0,0,0,53,51,1,
		0,0,0,54,58,7,3,0,0,55,57,3,19,9,0,56,55,1,0,0,0,57,60,1,0,0,0,58,56,1,
		0,0,0,58,59,1,0,0,0,59,61,1,0,0,0,60,58,1,0,0,0,61,65,7,4,0,0,62,64,3,
		19,9,0,63,62,1,0,0,0,64,67,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,68,1,
		0,0,0,67,65,1,0,0,0,68,72,7,5,0,0,69,71,3,19,9,0,70,69,1,0,0,0,71,74,1,
		0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,75,1,0,0,0,74,72,1,0,0,0,75,76,7,
		6,0,0,76,6,1,0,0,0,77,81,7,7,0,0,78,80,3,19,9,0,79,78,1,0,0,0,80,83,1,
		0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,84,1,0,0,0,83,81,1,0,0,0,84,85,7,
		8,0,0,85,8,1,0,0,0,86,90,7,9,0,0,87,89,3,19,9,0,88,87,1,0,0,0,89,92,1,
		0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,93,1,0,0,0,92,90,1,0,0,0,93,97,7,
		1,0,0,94,96,3,19,9,0,95,94,1,0,0,0,96,99,1,0,0,0,97,95,1,0,0,0,97,98,1,
		0,0,0,98,100,1,0,0,0,99,97,1,0,0,0,100,104,7,10,0,0,101,103,3,19,9,0,102,
		101,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,107,1,
		0,0,0,106,104,1,0,0,0,107,108,7,11,0,0,108,10,1,0,0,0,109,113,7,12,0,0,
		110,112,3,19,9,0,111,110,1,0,0,0,112,115,1,0,0,0,113,111,1,0,0,0,113,114,
		1,0,0,0,114,116,1,0,0,0,115,113,1,0,0,0,116,117,7,7,0,0,117,12,1,0,0,0,
		118,122,7,5,0,0,119,121,3,19,9,0,120,119,1,0,0,0,121,124,1,0,0,0,122,120,
		1,0,0,0,122,123,1,0,0,0,123,125,1,0,0,0,124,122,1,0,0,0,125,129,7,0,0,
		0,126,128,3,19,9,0,127,126,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,
		130,1,0,0,0,130,132,1,0,0,0,131,129,1,0,0,0,132,136,7,13,0,0,133,135,3,
		19,9,0,134,133,1,0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,
		137,139,1,0,0,0,138,136,1,0,0,0,139,143,7,5,0,0,140,142,3,19,9,0,141,140,
		1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,146,1,0,0,
		0,145,143,1,0,0,0,146,150,7,12,0,0,147,149,3,19,9,0,148,147,1,0,0,0,149,
		152,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,153,1,0,0,0,152,150,1,
		0,0,0,153,157,7,14,0,0,154,156,3,19,9,0,155,154,1,0,0,0,156,159,1,0,0,
		0,157,155,1,0,0,0,157,158,1,0,0,0,158,160,1,0,0,0,159,157,1,0,0,0,160,
		164,7,1,0,0,161,163,3,19,9,0,162,161,1,0,0,0,163,166,1,0,0,0,164,162,1,
		0,0,0,164,165,1,0,0,0,165,167,1,0,0,0,166,164,1,0,0,0,167,171,7,12,0,0,
		168,170,3,19,9,0,169,168,1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,
		1,0,0,0,172,174,1,0,0,0,173,171,1,0,0,0,174,175,7,15,0,0,175,14,1,0,0,
		0,176,182,3,25,12,0,177,181,3,25,12,0,178,181,3,27,13,0,179,181,5,45,0,
		0,180,177,1,0,0,0,180,178,1,0,0,0,180,179,1,0,0,0,181,184,1,0,0,0,182,
		180,1,0,0,0,182,183,1,0,0,0,183,189,1,0,0,0,184,182,1,0,0,0,185,186,5,
		40,0,0,186,187,3,27,13,0,187,188,5,41,0,0,188,190,1,0,0,0,189,185,1,0,
		0,0,189,190,1,0,0,0,190,16,1,0,0,0,191,193,3,27,13,0,192,191,1,0,0,0,193,
		194,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,18,1,0,0,0,196,197,7,16,
		0,0,197,198,1,0,0,0,198,199,6,9,0,0,199,20,1,0,0,0,200,201,5,46,0,0,201,
		22,1,0,0,0,202,204,5,34,0,0,203,205,8,17,0,0,204,203,1,0,0,0,205,206,1,
		0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,209,5,34,0,0,
		209,24,1,0,0,0,210,211,7,18,0,0,211,26,1,0,0,0,212,213,7,19,0,0,213,28,
		1,0,0,0,25,0,37,44,51,58,65,72,81,90,97,104,113,122,129,136,143,150,157,
		164,171,180,182,189,194,206,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
