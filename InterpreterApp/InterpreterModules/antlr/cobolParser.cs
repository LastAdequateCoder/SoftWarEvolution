//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from cobol.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class cobolParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, DISPLAY=3, OF=4, WITH=5, NO=6, ADVANCING=7, IDENTIFIER=8, 
		INT=9, SPACE=10, DOT=11, LITERAL=12;
	public const int
		RULE_display = 0, RULE_withnoadvancing = 1, RULE_atomic = 2, RULE_identifiers = 3;
	public static readonly string[] ruleNames = {
		"display", "withnoadvancing", "atomic", "identifiers"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", null, null, null, null, null, null, null, null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "DISPLAY", "OF", "WITH", "NO", "ADVANCING", "IDENTIFIER", 
		"INT", "SPACE", "DOT", "LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "cobol.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static cobolParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public cobolParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public cobolParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DisplayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISPLAY() { return GetToken(cobolParser.DISPLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext[] atomic() {
			return GetRuleContexts<AtomicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic(int i) {
			return GetRuleContext<AtomicContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithnoadvancingContext withnoadvancing() {
			return GetRuleContext<WithnoadvancingContext>(0);
		}
		public DisplayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_display; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterDisplay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitDisplay(this);
		}
	}

	[RuleVersion(0)]
	public DisplayContext display() {
		DisplayContext _localctx = new DisplayContext(Context, State);
		EnterRule(_localctx, 0, RULE_display);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8;
			Match(DISPLAY);
			State = 10;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 9;
				atomic();
				}
				}
				State = 12;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4864L) != 0) );
			State = 15;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 14;
				withnoadvancing();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithnoadvancingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(cobolParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(cobolParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADVANCING() { return GetToken(cobolParser.ADVANCING, 0); }
		public WithnoadvancingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withnoadvancing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterWithnoadvancing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitWithnoadvancing(this);
		}
	}

	[RuleVersion(0)]
	public WithnoadvancingContext withnoadvancing() {
		WithnoadvancingContext _localctx = new WithnoadvancingContext(Context, State);
		EnterRule(_localctx, 2, RULE_withnoadvancing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			Match(WITH);
			State = 18;
			Match(NO);
			State = 19;
			Match(ADVANCING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(cobolParser.LITERAL, 0); }
		public AtomicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitAtomic(this);
		}
	}

	[RuleVersion(0)]
	public AtomicContext atomic() {
		AtomicContext _localctx = new AtomicContext(Context, State);
		EnterRule(_localctx, 4, RULE_atomic);
		try {
			State = 24;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 21;
				identifiers();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 22;
				Match(INT);
				}
				break;
			case LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 23;
				Match(LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(cobolParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(cobolParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OF() { return GetTokens(cobolParser.OF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF(int i) {
			return GetToken(cobolParser.OF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		public IdentifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterIdentifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitIdentifiers(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiersContext identifiers() {
		IdentifiersContext _localctx = new IdentifiersContext(Context, State);
		EnterRule(_localctx, 6, RULE_identifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			Match(IDENTIFIER);
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OF) {
				{
				{
				State = 27;
				Match(OF);
				State = 28;
				Match(IDENTIFIER);
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 34;
				Match(T__0);
				State = 35;
				Match(INT);
				State = 36;
				Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,12,40,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,1,0,1,0,4,0,11,8,0,11,0,12,0,
		12,1,0,3,0,16,8,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,3,2,25,8,2,1,3,1,3,1,3,5,
		3,30,8,3,10,3,12,3,33,9,3,1,3,1,3,1,3,3,3,38,8,3,1,3,0,0,4,0,2,4,6,0,0,
		41,0,8,1,0,0,0,2,17,1,0,0,0,4,24,1,0,0,0,6,26,1,0,0,0,8,10,5,3,0,0,9,11,
		3,4,2,0,10,9,1,0,0,0,11,12,1,0,0,0,12,10,1,0,0,0,12,13,1,0,0,0,13,15,1,
		0,0,0,14,16,3,2,1,0,15,14,1,0,0,0,15,16,1,0,0,0,16,1,1,0,0,0,17,18,5,5,
		0,0,18,19,5,6,0,0,19,20,5,7,0,0,20,3,1,0,0,0,21,25,3,6,3,0,22,25,5,9,0,
		0,23,25,5,12,0,0,24,21,1,0,0,0,24,22,1,0,0,0,24,23,1,0,0,0,25,5,1,0,0,
		0,26,31,5,8,0,0,27,28,5,4,0,0,28,30,5,8,0,0,29,27,1,0,0,0,30,33,1,0,0,
		0,31,29,1,0,0,0,31,32,1,0,0,0,32,37,1,0,0,0,33,31,1,0,0,0,34,35,5,1,0,
		0,35,36,5,9,0,0,36,38,5,2,0,0,37,34,1,0,0,0,37,38,1,0,0,0,38,7,1,0,0,0,
		5,12,15,24,31,37
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
