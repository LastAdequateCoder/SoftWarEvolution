//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from cobol.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class cobolParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, REPRESENTATION=4, ARITHMETIC_OPERATOR=5, COMPARISON_OPERATOR=6, 
		BOOLEAN_OPERATOR=7, IDENTIFICATION=8, DIVISION=9, OCCURS=10, TIMES=11, 
		PICTURE=12, IS=13, PROCEDURE=14, USING=15, BY=16, FROM=17, REFERENCE=18, 
		CONTENT=19, VALUE=20, LIKE=21, DISPLAY=22, OF=23, WITH=24, NO=25, ADVANCING=26, 
		DATA=27, ADD=28, TO=29, INTO=30, GIVING=31, REMAINDER=32, ACCEPT=33, MULTIPLY=34, 
		SUBTRACT=35, DIVIDE=36, IF=37, ELSE=38, THEN=39, END=40, TRUE=41, FALSE=42, 
		NOT=43, WHEN=44, ALSO=45, OTHER=46, EVALUATE=47, STOP=48, NEXT=49, SENTENCE=50, 
		PERFORM=51, THROUGH=52, COPY=53, REPLACING=54, LOOP=55, VARYING=56, WHILE=57, 
		UNTIL=58, IDENTIFIER=59, INT=60, SPACE=61, DOT=62, LITERAL=63, COPY_LITERAL=64;
	public const int
		RULE_program = 0, RULE_identification_division = 1, RULE_data_division = 2, 
		RULE_variables = 3, RULE_occurs = 4, RULE_level = 5, RULE_picture = 6, 
		RULE_like = 7, RULE_procedure_division = 8, RULE_using = 9, RULE_use = 10, 
		RULE_sentence = 11, RULE_proc = 12, RULE_statement = 13, RULE_display = 14, 
		RULE_add = 15, RULE_multiply = 16, RULE_divide = 17, RULE_subtract = 18, 
		RULE_accept = 19, RULE_withnoadvancing = 20, RULE_atomic = 21, RULE_giving = 22, 
		RULE_identifiers = 23, RULE_remainder = 24, RULE_if = 25, RULE_arithmetic_expression = 26, 
		RULE_string_expression = 27, RULE_boolean = 28, RULE_expressions = 29, 
		RULE_evaluate = 30, RULE_when_block = 31, RULE_stop = 32, RULE_next_sentence = 33, 
		RULE_perform = 34, RULE_times = 35, RULE_copy = 36, RULE_replacing = 37, 
		RULE_replacements = 38, RULE_loop = 39, RULE_loop_expression = 40;
	public static readonly string[] ruleNames = {
		"program", "identification_division", "data_division", "variables", "occurs", 
		"level", "picture", "like", "procedure_division", "using", "use", "sentence", 
		"proc", "statement", "display", "add", "multiply", "divide", "subtract", 
		"accept", "withnoadvancing", "atomic", "giving", "identifiers", "remainder", 
		"if", "arithmetic_expression", "string_expression", "boolean", "expressions", 
		"evaluate", "when_block", "stop", "next_sentence", "perform", "times", 
		"copy", "replacing", "replacements", "loop", "loop_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "REPRESENTATION", "ARITHMETIC_OPERATOR", "COMPARISON_OPERATOR", 
		"BOOLEAN_OPERATOR", "IDENTIFICATION", "DIVISION", "OCCURS", "TIMES", "PICTURE", 
		"IS", "PROCEDURE", "USING", "BY", "FROM", "REFERENCE", "CONTENT", "VALUE", 
		"LIKE", "DISPLAY", "OF", "WITH", "NO", "ADVANCING", "DATA", "ADD", "TO", 
		"INTO", "GIVING", "REMAINDER", "ACCEPT", "MULTIPLY", "SUBTRACT", "DIVIDE", 
		"IF", "ELSE", "THEN", "END", "TRUE", "FALSE", "NOT", "WHEN", "ALSO", "OTHER", 
		"EVALUATE", "STOP", "NEXT", "SENTENCE", "PERFORM", "THROUGH", "COPY", 
		"REPLACING", "LOOP", "VARYING", "WHILE", "UNTIL", "IDENTIFIER", "INT", 
		"SPACE", "DOT", "LITERAL", "COPY_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "cobol.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static cobolParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public cobolParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public cobolParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identification_divisionContext identification_division() {
			return GetRuleContext<Identification_divisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(cobolParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_divisionContext procedure_division() {
			return GetRuleContext<Procedure_divisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_divisionContext data_division() {
			return GetRuleContext<Data_divisionContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			identification_division();
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATA) {
				{
				State = 83;
				data_division();
				}
			}

			{
			State = 86;
			procedure_division();
			}
			State = 87;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identification_divisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICATION() { return GetToken(cobolParser.IDENTIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(cobolParser.DIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(cobolParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(cobolParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(cobolParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(cobolParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LITERAL() { return GetTokens(cobolParser.LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL(int i) {
			return GetToken(cobolParser.LITERAL, i);
		}
		public Identification_divisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identification_division; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterIdentification_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitIdentification_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentification_division(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identification_divisionContext identification_division() {
		Identification_divisionContext _localctx = new Identification_divisionContext(Context, State);
		EnterRule(_localctx, 2, RULE_identification_division);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(IDENTIFICATION);
			State = 90;
			Match(DIVISION);
			State = 91;
			Match(DOT);
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 92;
				Match(IDENTIFIER);
				State = 93;
				Match(DOT);
				State = 94;
				Match(LITERAL);
				State = 95;
				Match(DOT);
				}
				}
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_divisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(cobolParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(cobolParser.DIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(cobolParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablesContext[] variables() {
			return GetRuleContexts<VariablesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablesContext variables(int i) {
			return GetRuleContext<VariablesContext>(i);
		}
		public Data_divisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_division; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterData_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitData_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_division(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_divisionContext data_division() {
		Data_divisionContext _localctx = new Data_divisionContext(Context, State);
		EnterRule(_localctx, 4, RULE_data_division);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(DATA);
			State = 102;
			Match(DIVISION);
			State = 103;
			Match(DOT);
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INT) {
				{
				{
				State = 104;
				variables();
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LevelContext level() {
			return GetRuleContext<LevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(cobolParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(cobolParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PictureContext picture() {
			return GetRuleContext<PictureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeContext like() {
			return GetRuleContext<LikeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OccursContext occurs() {
			return GetRuleContext<OccursContext>(0);
		}
		public VariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariablesContext variables() {
		VariablesContext _localctx = new VariablesContext(Context, State);
		EnterRule(_localctx, 6, RULE_variables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 110;
			level();
			State = 111;
			Match(IDENTIFIER);
			State = 114;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PICTURE:
				{
				State = 112;
				picture();
				}
				break;
			case LIKE:
				{
				State = 113;
				like();
				}
				break;
			case OCCURS:
			case DOT:
				break;
			default:
				break;
			}
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OCCURS) {
				{
				State = 116;
				occurs();
				}
			}

			State = 119;
			Match(DOT);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OccursContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCCURS() { return GetToken(cobolParser.OCCURS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(cobolParser.TIMES, 0); }
		public OccursContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_occurs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterOccurs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitOccurs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOccurs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OccursContext occurs() {
		OccursContext _localctx = new OccursContext(Context, State);
		EnterRule(_localctx, 8, RULE_occurs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(OCCURS);
			State = 122;
			Match(INT);
			State = 123;
			Match(TIMES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		public LevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_level; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelContext level() {
		LevelContext _localctx = new LevelContext(Context, State);
		EnterRule(_localctx, 10, RULE_level);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PictureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PICTURE() { return GetToken(cobolParser.PICTURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(cobolParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPRESENTATION() { return GetToken(cobolParser.REPRESENTATION, 0); }
		public PictureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_picture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterPicture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitPicture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPicture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PictureContext picture() {
		PictureContext _localctx = new PictureContext(Context, State);
		EnterRule(_localctx, 12, RULE_picture);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(PICTURE);
			State = 128;
			Match(IS);
			State = 129;
			Match(REPRESENTATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(cobolParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public LikeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_like; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLike(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLike(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLike(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikeContext like() {
		LikeContext _localctx = new LikeContext(Context, State);
		EnterRule(_localctx, 14, RULE_like);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(LIKE);
			State = 132;
			identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_divisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(cobolParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(cobolParser.DIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(cobolParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingContext @using() {
			return GetRuleContext<UsingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenceContext[] sentence() {
			return GetRuleContexts<SentenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenceContext sentence(int i) {
			return GetRuleContext<SentenceContext>(i);
		}
		public Procedure_divisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_division; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterProcedure_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitProcedure_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_division(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_divisionContext procedure_division() {
		Procedure_divisionContext _localctx = new Procedure_divisionContext(Context, State);
		EnterRule(_localctx, 16, RULE_procedure_division);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(PROCEDURE);
			State = 135;
			Match(DIVISION);
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 136;
				@using();
				}
			}

			State = 139;
			Match(DOT);
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 140;
				sentence();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 624733977369903104L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(cobolParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UseContext[] use() {
			return GetRuleContexts<UseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseContext use(int i) {
			return GetRuleContext<UseContext>(i);
		}
		public UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterUsing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitUsing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingContext @using() {
		UsingContext _localctx = new UsingContext(Context, State);
		EnterRule(_localctx, 18, RULE_using);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(USING);
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 146;
				use();
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==BY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(cobolParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(cobolParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTENT() { return GetToken(cobolParser.CONTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic() {
			return GetRuleContext<AtomicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(cobolParser.VALUE, 0); }
		public UseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseContext use() {
		UseContext _localctx = new UseContext(Context, State);
		EnterRule(_localctx, 20, RULE_use);
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151;
				Match(BY);
				State = 152;
				Match(REFERENCE);
				State = 153;
				identifiers();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154;
				Match(BY);
				State = 155;
				Match(CONTENT);
				State = 156;
				atomic();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 157;
				Match(BY);
				State = 158;
				Match(VALUE);
				State = 159;
				atomic();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(cobolParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(cobolParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcContext proc() {
			return GetRuleContext<ProcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterSentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitSentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenceContext sentence() {
		SentenceContext _localctx = new SentenceContext(Context, State);
		EnterRule(_localctx, 22, RULE_sentence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 162;
				proc();
				State = 163;
				Match(DOT);
				}
			}

			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 167;
				statement();
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 48273225066479616L) != 0) );
			State = 172;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(cobolParser.IDENTIFIER, 0); }
		public ProcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterProc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitProc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcContext proc() {
		ProcContext _localctx = new ProcContext(Context, State);
		EnterRule(_localctx, 24, RULE_proc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DisplayContext display() {
			return GetRuleContext<DisplayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AcceptContext accept() {
			return GetRuleContext<AcceptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyContext multiply() {
			return GetRuleContext<MultiplyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EvaluateContext evaluate() {
			return GetRuleContext<EvaluateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopContext stop() {
			return GetRuleContext<StopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Next_sentenceContext next_sentence() {
			return GetRuleContext<Next_sentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PerformContext perform() {
			return GetRuleContext<PerformContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyContext copy() {
			return GetRuleContext<CopyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_statement);
		try {
			State = 189;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DISPLAY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176;
				display();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				add();
				}
				break;
			case ACCEPT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 178;
				accept();
				}
				break;
			case MULTIPLY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 179;
				multiply();
				}
				break;
			case SUBTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 180;
				subtract();
				}
				break;
			case DIVIDE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 181;
				divide();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 7);
				{
				State = 182;
				@if();
				}
				break;
			case EVALUATE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 183;
				evaluate();
				}
				break;
			case STOP:
				EnterOuterAlt(_localctx, 9);
				{
				State = 184;
				stop();
				}
				break;
			case NEXT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 185;
				next_sentence();
				}
				break;
			case PERFORM:
				EnterOuterAlt(_localctx, 11);
				{
				State = 186;
				perform();
				}
				break;
			case COPY:
				EnterOuterAlt(_localctx, 12);
				{
				State = 187;
				copy();
				}
				break;
			case LOOP:
				EnterOuterAlt(_localctx, 13);
				{
				State = 188;
				loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisplayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISPLAY() { return GetToken(cobolParser.DISPLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext[] atomic() {
			return GetRuleContexts<AtomicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic(int i) {
			return GetRuleContext<AtomicContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithnoadvancingContext withnoadvancing() {
			return GetRuleContext<WithnoadvancingContext>(0);
		}
		public DisplayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_display; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterDisplay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitDisplay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisplayContext display() {
		DisplayContext _localctx = new DisplayContext(Context, State);
		EnterRule(_localctx, 28, RULE_display);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(DISPLAY);
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 192;
				atomic();
				}
				}
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -7493989779944505344L) != 0) );
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 197;
				withnoadvancing();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public IToken _INT;
		public IList<IToken> _additions = new List<IToken>();
		public IToken @base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(cobolParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(cobolParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(cobolParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(cobolParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GivingContext giving() {
			return GetRuleContext<GivingContext>(0);
		}
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 30, RULE_add);
		int _la;
		try {
			State = 217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				Match(ADD);
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 201;
					_localctx._INT = Match(INT);
					_localctx._additions.Add(_localctx._INT);
					}
					}
					State = 204;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==INT );
				State = 206;
				Match(TO);
				State = 207;
				identifiers();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 208;
				Match(ADD);
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 209;
					_localctx._INT = Match(INT);
					_localctx._additions.Add(_localctx._INT);
					}
					}
					State = 212;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==INT );
				State = 214;
				Match(TO);
				State = 215;
				_localctx.@base = Match(INT);
				State = 216;
				giving();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyContext : ParserRuleContext {
		public IToken multiplier;
		public IToken @base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(cobolParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(cobolParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(cobolParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(cobolParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext[] identifiers() {
			return GetRuleContexts<IdentifiersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers(int i) {
			return GetRuleContext<IdentifiersContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GivingContext giving() {
			return GetRuleContext<GivingContext>(0);
		}
		public MultiplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiply; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterMultiply(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitMultiply(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyContext multiply() {
		MultiplyContext _localctx = new MultiplyContext(Context, State);
		EnterRule(_localctx, 32, RULE_multiply);
		int _la;
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219;
				Match(MULTIPLY);
				State = 220;
				_localctx.multiplier = Match(INT);
				State = 221;
				Match(BY);
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 222;
					identifiers();
					}
					}
					State = 225;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==IDENTIFIER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227;
				Match(MULTIPLY);
				State = 228;
				_localctx.multiplier = Match(INT);
				State = 229;
				Match(BY);
				State = 230;
				_localctx.@base = Match(INT);
				State = 231;
				giving();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public IToken divisor;
		public IToken @base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(cobolParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(cobolParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(cobolParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(cobolParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext[] identifiers() {
			return GetRuleContexts<IdentifiersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers(int i) {
			return GetRuleContext<IdentifiersContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GivingContext giving() {
			return GetRuleContext<GivingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemainderContext remainder() {
			return GetRuleContext<RemainderContext>(0);
		}
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 34, RULE_divide);
		int _la;
		try {
			State = 254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234;
				Match(DIVIDE);
				State = 235;
				_localctx.divisor = Match(INT);
				State = 236;
				Match(INTO);
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 237;
					identifiers();
					}
					}
					State = 240;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==IDENTIFIER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 242;
				Match(DIVIDE);
				State = 243;
				_localctx.divisor = Match(INT);
				State = 244;
				Match(INTO);
				State = 245;
				_localctx.@base = Match(INT);
				State = 246;
				giving();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 247;
				Match(DIVIDE);
				State = 248;
				_localctx.divisor = Match(INT);
				State = 249;
				Match(INTO);
				State = 250;
				_localctx.@base = Match(INT);
				State = 251;
				giving();
				State = 252;
				remainder();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		public IToken _INT;
		public IList<IToken> _subtractors = new List<IToken>();
		public IToken @base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(cobolParser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(cobolParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(cobolParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(cobolParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GivingContext giving() {
			return GetRuleContext<GivingContext>(0);
		}
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 36, RULE_subtract);
		int _la;
		try {
			State = 273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256;
				Match(SUBTRACT);
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 257;
					_localctx._INT = Match(INT);
					_localctx._subtractors.Add(_localctx._INT);
					}
					}
					State = 260;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==INT );
				State = 262;
				Match(FROM);
				State = 263;
				identifiers();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 264;
				Match(SUBTRACT);
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 265;
					_localctx._INT = Match(INT);
					_localctx._subtractors.Add(_localctx._INT);
					}
					}
					State = 268;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==INT );
				State = 270;
				Match(FROM);
				State = 271;
				_localctx.@base = Match(INT);
				State = 272;
				giving();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AcceptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCEPT() { return GetToken(cobolParser.ACCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext[] identifiers() {
			return GetRuleContexts<IdentifiersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers(int i) {
			return GetRuleContext<IdentifiersContext>(i);
		}
		public AcceptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accept; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterAccept(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitAccept(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccept(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AcceptContext accept() {
		AcceptContext _localctx = new AcceptContext(Context, State);
		EnterRule(_localctx, 38, RULE_accept);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			Match(ACCEPT);
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 276;
				identifiers();
				}
				}
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithnoadvancingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(cobolParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(cobolParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADVANCING() { return GetToken(cobolParser.ADVANCING, 0); }
		public WithnoadvancingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withnoadvancing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterWithnoadvancing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitWithnoadvancing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithnoadvancing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithnoadvancingContext withnoadvancing() {
		WithnoadvancingContext _localctx = new WithnoadvancingContext(Context, State);
		EnterRule(_localctx, 40, RULE_withnoadvancing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			Match(WITH);
			State = 282;
			Match(NO);
			State = 283;
			Match(ADVANCING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(cobolParser.LITERAL, 0); }
		public AtomicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicContext atomic() {
		AtomicContext _localctx = new AtomicContext(Context, State);
		EnterRule(_localctx, 42, RULE_atomic);
		try {
			State = 288;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 285;
				identifiers();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 286;
				Match(INT);
				}
				break;
			case LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 287;
				Match(LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GivingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GIVING() { return GetToken(cobolParser.GIVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public GivingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_giving; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterGiving(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitGiving(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGiving(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GivingContext giving() {
		GivingContext _localctx = new GivingContext(Context, State);
		EnterRule(_localctx, 44, RULE_giving);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			Match(GIVING);
			State = 291;
			identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(cobolParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(cobolParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OF() { return GetTokens(cobolParser.OF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF(int i) {
			return GetToken(cobolParser.OF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		public IdentifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterIdentifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitIdentifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiersContext identifiers() {
		IdentifiersContext _localctx = new IdentifiersContext(Context, State);
		EnterRule(_localctx, 46, RULE_identifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			Match(IDENTIFIER);
			State = 298;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 294;
					Match(OF);
					State = 295;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 300;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			State = 304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 301;
				Match(T__0);
				State = 302;
				Match(INT);
				State = 303;
				Match(T__1);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemainderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMAINDER() { return GetToken(cobolParser.REMAINDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public RemainderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remainder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterRemainder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitRemainder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemainder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemainderContext remainder() {
		RemainderContext _localctx = new RemainderContext(Context, State);
		EnterRule(_localctx, 48, RULE_remainder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(REMAINDER);
			State = 307;
			identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _i = new List<StatementContext>();
		public IList<StatementContext> _e = new List<StatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(cobolParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(cobolParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(cobolParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(cobolParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 50, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(IF);
			State = 310;
			boolean(0);
			State = 311;
			Match(THEN);
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 312;
				_localctx._statement = statement();
				_localctx._i.Add(_localctx._statement);
				}
				}
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 48273225066479616L) != 0) );
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 317;
				Match(ELSE);
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 318;
					_localctx._statement = statement();
					_localctx._e.Add(_localctx._statement);
					}
					}
					State = 321;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 48273225066479616L) != 0) );
				}
			}

			State = 325;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic() {
			return GetRuleContext<AtomicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARITHMETIC_OPERATOR() { return GetToken(cobolParser.ARITHMETIC_OPERATOR, 0); }
		public Arithmetic_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterArithmetic_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitArithmetic_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmetic_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_expressionContext arithmetic_expression() {
		return arithmetic_expression(0);
	}

	private Arithmetic_expressionContext arithmetic_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Arithmetic_expressionContext _localctx = new Arithmetic_expressionContext(Context, _parentState);
		Arithmetic_expressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_arithmetic_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 328;
			atomic();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 335;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Arithmetic_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
					State = 330;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 331;
					Match(ARITHMETIC_OPERATOR);
					State = 332;
					arithmetic_expression(2);
					}
					} 
				}
				State = 337;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class String_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic() {
			return GetRuleContext<AtomicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_expressionContext[] string_expression() {
			return GetRuleContexts<String_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_expressionContext string_expression(int i) {
			return GetRuleContext<String_expressionContext>(i);
		}
		public String_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterString_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitString_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_expressionContext string_expression() {
		return string_expression(0);
	}

	private String_expressionContext string_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		String_expressionContext _localctx = new String_expressionContext(Context, _parentState);
		String_expressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_string_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 339;
			atomic();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 346;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new String_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_string_expression);
					State = 341;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 342;
					Match(T__2);
					State = 343;
					string_expression(2);
					}
					} 
				}
				State = 348;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(cobolParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(cobolParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARISON_OPERATOR() { return GetToken(cobolParser.COMPARISON_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(cobolParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_OPERATOR() { return GetToken(cobolParser.BOOLEAN_OPERATOR, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		return boolean(0);
	}

	private BooleanContext boolean(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BooleanContext _localctx = new BooleanContext(Context, _parentState);
		BooleanContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_boolean, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
				{
				State = 350;
				Match(TRUE);
				}
				break;
			case FALSE:
				{
				State = 351;
				Match(FALSE);
				}
				break;
			case IDENTIFIER:
			case INT:
			case LITERAL:
				{
				State = 352;
				arithmetic_expression(0);
				State = 353;
				Match(COMPARISON_OPERATOR);
				State = 354;
				arithmetic_expression(0);
				}
				break;
			case NOT:
				{
				State = 356;
				Match(NOT);
				State = 357;
				boolean(2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 365;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BooleanContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_boolean);
					State = 360;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 361;
					Match(BOOLEAN_OPERATOR);
					State = 362;
					boolean(2);
					}
					} 
				}
				State = 367;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_expressionContext string_expression() {
			return GetRuleContext<String_expressionContext>(0);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 58, RULE_expressions);
		try {
			State = 371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 368;
				boolean(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 369;
				arithmetic_expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 370;
				string_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvaluateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVALUATE() { return GetToken(cobolParser.EVALUATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext[] expressions() {
			return GetRuleContexts<ExpressionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions(int i) {
			return GetRuleContext<ExpressionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(cobolParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALSO() { return GetTokens(cobolParser.ALSO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALSO(int i) {
			return GetToken(cobolParser.ALSO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_blockContext[] when_block() {
			return GetRuleContexts<When_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_blockContext when_block(int i) {
			return GetRuleContext<When_blockContext>(i);
		}
		public EvaluateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterEvaluate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitEvaluate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluateContext evaluate() {
		EvaluateContext _localctx = new EvaluateContext(Context, State);
		EnterRule(_localctx, 60, RULE_evaluate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			Match(EVALUATE);
			State = 374;
			expressions();
			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ALSO) {
				{
				{
				State = 375;
				Match(ALSO);
				State = 376;
				expressions();
				}
				}
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHEN) {
				{
				{
				State = 382;
				when_block();
				}
				}
				State = 387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 388;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(cobolParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext[] atomic() {
			return GetRuleContexts<AtomicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic(int i) {
			return GetRuleContext<AtomicContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALSO() { return GetTokens(cobolParser.ALSO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALSO(int i) {
			return GetToken(cobolParser.ALSO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHER() { return GetToken(cobolParser.OTHER, 0); }
		public When_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterWhen_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitWhen_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhen_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public When_blockContext when_block() {
		When_blockContext _localctx = new When_blockContext(Context, State);
		EnterRule(_localctx, 62, RULE_when_block);
		int _la;
		try {
			State = 411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 390;
				Match(WHEN);
				State = 391;
				atomic();
				State = 396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ALSO) {
					{
					{
					State = 392;
					Match(ALSO);
					State = 393;
					atomic();
					}
					}
					State = 398;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 399;
					statement();
					}
					}
					State = 402;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 48273225066479616L) != 0) );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 404;
				Match(WHEN);
				State = 405;
				Match(OTHER);
				State = 407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 406;
					statement();
					}
					}
					State = 409;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 48273225066479616L) != 0) );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(cobolParser.STOP, 0); }
		public StopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterStop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitStop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopContext stop() {
		StopContext _localctx = new StopContext(Context, State);
		EnterRule(_localctx, 64, RULE_stop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Next_sentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(cobolParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SENTENCE() { return GetToken(cobolParser.SENTENCE, 0); }
		public Next_sentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_next_sentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterNext_sentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitNext_sentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNext_sentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Next_sentenceContext next_sentence() {
		Next_sentenceContext _localctx = new Next_sentenceContext(Context, State);
		EnterRule(_localctx, 66, RULE_next_sentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			Match(NEXT);
			State = 416;
			Match(SENTENCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PerformContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERFORM() { return GetToken(cobolParser.PERFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcContext proc() {
			return GetRuleContext<ProcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimesContext times() {
			return GetRuleContext<TimesContext>(0);
		}
		public PerformContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_perform; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterPerform(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitPerform(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPerform(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PerformContext perform() {
		PerformContext _localctx = new PerformContext(Context, State);
		EnterRule(_localctx, 68, RULE_perform);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			Match(PERFORM);
			State = 419;
			proc();
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT) {
				{
				State = 420;
				times();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(cobolParser.TIMES, 0); }
		public TimesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_times; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterTimes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitTimes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimesContext times() {
		TimesContext _localctx = new TimesContext(Context, State);
		EnterRule(_localctx, 70, RULE_times);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			Match(INT);
			State = 424;
			Match(TIMES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(cobolParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(cobolParser.LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplacingContext replacing() {
			return GetRuleContext<ReplacingContext>(0);
		}
		public CopyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterCopy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitCopy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyContext copy() {
		CopyContext _localctx = new CopyContext(Context, State);
		EnterRule(_localctx, 72, RULE_copy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(COPY);
			State = 427;
			Match(LITERAL);
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REPLACING) {
				{
				State = 428;
				replacing();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplacingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACING() { return GetToken(cobolParser.REPLACING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplacementsContext[] replacements() {
			return GetRuleContexts<ReplacementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplacementsContext replacements(int i) {
			return GetRuleContext<ReplacementsContext>(i);
		}
		public ReplacingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replacing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterReplacing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitReplacing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplacing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplacingContext replacing() {
		ReplacingContext _localctx = new ReplacingContext(Context, State);
		EnterRule(_localctx, 74, RULE_replacing);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			Match(REPLACING);
			State = 433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 432;
				replacements();
				}
				}
				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COPY_LITERAL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplacementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COPY_LITERAL() { return GetTokens(cobolParser.COPY_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY_LITERAL(int i) {
			return GetToken(cobolParser.COPY_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(cobolParser.BY, 0); }
		public ReplacementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replacements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterReplacements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitReplacements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplacements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplacementsContext replacements() {
		ReplacementsContext _localctx = new ReplacementsContext(Context, State);
		EnterRule(_localctx, 76, RULE_replacements);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			Match(COPY_LITERAL);
			State = 438;
			Match(BY);
			State = 439;
			Match(COPY_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(cobolParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(cobolParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Loop_expressionContext[] loop_expression() {
			return GetRuleContexts<Loop_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_expressionContext loop_expression(int i) {
			return GetRuleContext<Loop_expressionContext>(i);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 78, RULE_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			Match(LOOP);
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 552676383331975168L) != 0)) {
				{
				{
				State = 442;
				loop_expression();
				}
				}
				State = 447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 448;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_expressionContext : ParserRuleContext {
		public Loop_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_expression; } }
	 
		public Loop_expressionContext() { }
		public virtual void CopyFrom(Loop_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Loop_while_expressionContext : Loop_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(cobolParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public Loop_while_expressionContext(Loop_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLoop_while_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLoop_while_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_while_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Loop_varying_expressionContext : Loop_expressionContext {
		public AtomicContext from;
		public AtomicContext to;
		public AtomicContext by;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(cobolParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(cobolParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(cobolParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(cobolParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext[] atomic() {
			return GetRuleContexts<AtomicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic(int i) {
			return GetRuleContext<AtomicContext>(i);
		}
		public Loop_varying_expressionContext(Loop_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLoop_varying_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLoop_varying_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_varying_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Loop_statement_expessionContext : Loop_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Loop_statement_expessionContext(Loop_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLoop_statement_expession(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLoop_statement_expession(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_statement_expession(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Loop_until_expressionContext : Loop_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(cobolParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public Loop_until_expressionContext(Loop_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLoop_until_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLoop_until_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_until_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loop_expressionContext loop_expression() {
		Loop_expressionContext _localctx = new Loop_expressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_loop_expression);
		int _la;
		try {
			State = 471;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARYING:
				_localctx = new Loop_varying_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 450;
				Match(VARYING);
				State = 452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 451;
					identifiers();
					}
				}

				State = 456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 454;
					Match(FROM);
					State = 455;
					((Loop_varying_expressionContext)_localctx).from = atomic();
					}
				}

				State = 460;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TO) {
					{
					State = 458;
					Match(TO);
					State = 459;
					((Loop_varying_expressionContext)_localctx).to = atomic();
					}
				}

				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BY) {
					{
					State = 462;
					Match(BY);
					State = 463;
					((Loop_varying_expressionContext)_localctx).by = atomic();
					}
				}

				}
				break;
			case WHILE:
				_localctx = new Loop_while_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 466;
				Match(WHILE);
				State = 467;
				boolean(0);
				}
				break;
			case UNTIL:
				_localctx = new Loop_until_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 468;
				Match(UNTIL);
				State = 469;
				boolean(0);
				}
				break;
			case DISPLAY:
			case ADD:
			case ACCEPT:
			case MULTIPLY:
			case SUBTRACT:
			case DIVIDE:
			case IF:
			case EVALUATE:
			case STOP:
			case NEXT:
			case PERFORM:
			case COPY:
			case LOOP:
				_localctx = new Loop_statement_expessionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 470;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return arithmetic_expression_sempred((Arithmetic_expressionContext)_localctx, predIndex);
		case 27: return string_expression_sempred((String_expressionContext)_localctx, predIndex);
		case 28: return boolean_sempred((BooleanContext)_localctx, predIndex);
		}
		return true;
	}
	private bool arithmetic_expression_sempred(Arithmetic_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool string_expression_sempred(String_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool boolean_sempred(BooleanContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,64,474,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,1,0,1,0,3,0,85,8,0,1,
		0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,97,8,1,10,1,12,1,100,9,1,1,2,
		1,2,1,2,1,2,5,2,106,8,2,10,2,12,2,109,9,2,1,3,1,3,1,3,1,3,3,3,115,8,3,
		1,3,3,3,118,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,
		7,1,7,1,8,1,8,1,8,3,8,138,8,8,1,8,1,8,4,8,142,8,8,11,8,12,8,143,1,9,1,
		9,4,9,148,8,9,11,9,12,9,149,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,3,10,161,8,10,1,11,1,11,1,11,3,11,166,8,11,1,11,4,11,169,8,11,11,11,
		12,11,170,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,3,13,190,8,13,1,14,1,14,4,14,194,8,14,11,14,12,
		14,195,1,14,3,14,199,8,14,1,15,1,15,4,15,203,8,15,11,15,12,15,204,1,15,
		1,15,1,15,1,15,4,15,211,8,15,11,15,12,15,212,1,15,1,15,1,15,3,15,218,8,
		15,1,16,1,16,1,16,1,16,4,16,224,8,16,11,16,12,16,225,1,16,1,16,1,16,1,
		16,1,16,3,16,233,8,16,1,17,1,17,1,17,1,17,4,17,239,8,17,11,17,12,17,240,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,255,8,
		17,1,18,1,18,4,18,259,8,18,11,18,12,18,260,1,18,1,18,1,18,1,18,4,18,267,
		8,18,11,18,12,18,268,1,18,1,18,1,18,3,18,274,8,18,1,19,1,19,4,19,278,8,
		19,11,19,12,19,279,1,20,1,20,1,20,1,20,1,21,1,21,1,21,3,21,289,8,21,1,
		22,1,22,1,22,1,23,1,23,1,23,5,23,297,8,23,10,23,12,23,300,9,23,1,23,1,
		23,1,23,3,23,305,8,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,4,25,314,8,25,
		11,25,12,25,315,1,25,1,25,4,25,320,8,25,11,25,12,25,321,3,25,324,8,25,
		1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,5,26,334,8,26,10,26,12,26,337,
		9,26,1,27,1,27,1,27,1,27,1,27,1,27,5,27,345,8,27,10,27,12,27,348,9,27,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,359,8,28,1,28,1,28,1,
		28,5,28,364,8,28,10,28,12,28,367,9,28,1,29,1,29,1,29,3,29,372,8,29,1,30,
		1,30,1,30,1,30,5,30,378,8,30,10,30,12,30,381,9,30,1,30,5,30,384,8,30,10,
		30,12,30,387,9,30,1,30,1,30,1,31,1,31,1,31,1,31,5,31,395,8,31,10,31,12,
		31,398,9,31,1,31,4,31,401,8,31,11,31,12,31,402,1,31,1,31,1,31,4,31,408,
		8,31,11,31,12,31,409,3,31,412,8,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,
		1,34,3,34,422,8,34,1,35,1,35,1,35,1,36,1,36,1,36,3,36,430,8,36,1,37,1,
		37,4,37,434,8,37,11,37,12,37,435,1,38,1,38,1,38,1,38,1,39,1,39,5,39,444,
		8,39,10,39,12,39,447,9,39,1,39,1,39,1,40,1,40,3,40,453,8,40,1,40,1,40,
		3,40,457,8,40,1,40,1,40,3,40,461,8,40,1,40,1,40,3,40,465,8,40,1,40,1,40,
		1,40,1,40,1,40,3,40,472,8,40,1,40,0,3,52,54,56,41,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
		66,68,70,72,74,76,78,80,0,0,503,0,82,1,0,0,0,2,89,1,0,0,0,4,101,1,0,0,
		0,6,110,1,0,0,0,8,121,1,0,0,0,10,125,1,0,0,0,12,127,1,0,0,0,14,131,1,0,
		0,0,16,134,1,0,0,0,18,145,1,0,0,0,20,160,1,0,0,0,22,165,1,0,0,0,24,174,
		1,0,0,0,26,189,1,0,0,0,28,191,1,0,0,0,30,217,1,0,0,0,32,232,1,0,0,0,34,
		254,1,0,0,0,36,273,1,0,0,0,38,275,1,0,0,0,40,281,1,0,0,0,42,288,1,0,0,
		0,44,290,1,0,0,0,46,293,1,0,0,0,48,306,1,0,0,0,50,309,1,0,0,0,52,327,1,
		0,0,0,54,338,1,0,0,0,56,358,1,0,0,0,58,371,1,0,0,0,60,373,1,0,0,0,62,411,
		1,0,0,0,64,413,1,0,0,0,66,415,1,0,0,0,68,418,1,0,0,0,70,423,1,0,0,0,72,
		426,1,0,0,0,74,431,1,0,0,0,76,437,1,0,0,0,78,441,1,0,0,0,80,471,1,0,0,
		0,82,84,3,2,1,0,83,85,3,4,2,0,84,83,1,0,0,0,84,85,1,0,0,0,85,86,1,0,0,
		0,86,87,3,16,8,0,87,88,5,0,0,1,88,1,1,0,0,0,89,90,5,8,0,0,90,91,5,9,0,
		0,91,98,5,62,0,0,92,93,5,59,0,0,93,94,5,62,0,0,94,95,5,63,0,0,95,97,5,
		62,0,0,96,92,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,3,1,
		0,0,0,100,98,1,0,0,0,101,102,5,27,0,0,102,103,5,9,0,0,103,107,5,62,0,0,
		104,106,3,6,3,0,105,104,1,0,0,0,106,109,1,0,0,0,107,105,1,0,0,0,107,108,
		1,0,0,0,108,5,1,0,0,0,109,107,1,0,0,0,110,111,3,10,5,0,111,114,5,59,0,
		0,112,115,3,12,6,0,113,115,3,14,7,0,114,112,1,0,0,0,114,113,1,0,0,0,114,
		115,1,0,0,0,115,117,1,0,0,0,116,118,3,8,4,0,117,116,1,0,0,0,117,118,1,
		0,0,0,118,119,1,0,0,0,119,120,5,62,0,0,120,7,1,0,0,0,121,122,5,10,0,0,
		122,123,5,60,0,0,123,124,5,11,0,0,124,9,1,0,0,0,125,126,5,60,0,0,126,11,
		1,0,0,0,127,128,5,12,0,0,128,129,5,13,0,0,129,130,5,4,0,0,130,13,1,0,0,
		0,131,132,5,21,0,0,132,133,3,46,23,0,133,15,1,0,0,0,134,135,5,14,0,0,135,
		137,5,9,0,0,136,138,3,18,9,0,137,136,1,0,0,0,137,138,1,0,0,0,138,139,1,
		0,0,0,139,141,5,62,0,0,140,142,3,22,11,0,141,140,1,0,0,0,142,143,1,0,0,
		0,143,141,1,0,0,0,143,144,1,0,0,0,144,17,1,0,0,0,145,147,5,15,0,0,146,
		148,3,20,10,0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,1,0,0,0,149,150,
		1,0,0,0,150,19,1,0,0,0,151,152,5,16,0,0,152,153,5,18,0,0,153,161,3,46,
		23,0,154,155,5,16,0,0,155,156,5,19,0,0,156,161,3,42,21,0,157,158,5,16,
		0,0,158,159,5,20,0,0,159,161,3,42,21,0,160,151,1,0,0,0,160,154,1,0,0,0,
		160,157,1,0,0,0,161,21,1,0,0,0,162,163,3,24,12,0,163,164,5,62,0,0,164,
		166,1,0,0,0,165,162,1,0,0,0,165,166,1,0,0,0,166,168,1,0,0,0,167,169,3,
		26,13,0,168,167,1,0,0,0,169,170,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,
		0,171,172,1,0,0,0,172,173,5,62,0,0,173,23,1,0,0,0,174,175,5,59,0,0,175,
		25,1,0,0,0,176,190,3,28,14,0,177,190,3,30,15,0,178,190,3,38,19,0,179,190,
		3,32,16,0,180,190,3,36,18,0,181,190,3,34,17,0,182,190,3,50,25,0,183,190,
		3,60,30,0,184,190,3,64,32,0,185,190,3,66,33,0,186,190,3,68,34,0,187,190,
		3,72,36,0,188,190,3,78,39,0,189,176,1,0,0,0,189,177,1,0,0,0,189,178,1,
		0,0,0,189,179,1,0,0,0,189,180,1,0,0,0,189,181,1,0,0,0,189,182,1,0,0,0,
		189,183,1,0,0,0,189,184,1,0,0,0,189,185,1,0,0,0,189,186,1,0,0,0,189,187,
		1,0,0,0,189,188,1,0,0,0,190,27,1,0,0,0,191,193,5,22,0,0,192,194,3,42,21,
		0,193,192,1,0,0,0,194,195,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,
		198,1,0,0,0,197,199,3,40,20,0,198,197,1,0,0,0,198,199,1,0,0,0,199,29,1,
		0,0,0,200,202,5,28,0,0,201,203,5,60,0,0,202,201,1,0,0,0,203,204,1,0,0,
		0,204,202,1,0,0,0,204,205,1,0,0,0,205,206,1,0,0,0,206,207,5,29,0,0,207,
		218,3,46,23,0,208,210,5,28,0,0,209,211,5,60,0,0,210,209,1,0,0,0,211,212,
		1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,214,1,0,0,0,214,215,5,29,0,
		0,215,216,5,60,0,0,216,218,3,44,22,0,217,200,1,0,0,0,217,208,1,0,0,0,218,
		31,1,0,0,0,219,220,5,34,0,0,220,221,5,60,0,0,221,223,5,16,0,0,222,224,
		3,46,23,0,223,222,1,0,0,0,224,225,1,0,0,0,225,223,1,0,0,0,225,226,1,0,
		0,0,226,233,1,0,0,0,227,228,5,34,0,0,228,229,5,60,0,0,229,230,5,16,0,0,
		230,231,5,60,0,0,231,233,3,44,22,0,232,219,1,0,0,0,232,227,1,0,0,0,233,
		33,1,0,0,0,234,235,5,36,0,0,235,236,5,60,0,0,236,238,5,30,0,0,237,239,
		3,46,23,0,238,237,1,0,0,0,239,240,1,0,0,0,240,238,1,0,0,0,240,241,1,0,
		0,0,241,255,1,0,0,0,242,243,5,36,0,0,243,244,5,60,0,0,244,245,5,30,0,0,
		245,246,5,60,0,0,246,255,3,44,22,0,247,248,5,36,0,0,248,249,5,60,0,0,249,
		250,5,30,0,0,250,251,5,60,0,0,251,252,3,44,22,0,252,253,3,48,24,0,253,
		255,1,0,0,0,254,234,1,0,0,0,254,242,1,0,0,0,254,247,1,0,0,0,255,35,1,0,
		0,0,256,258,5,35,0,0,257,259,5,60,0,0,258,257,1,0,0,0,259,260,1,0,0,0,
		260,258,1,0,0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,263,5,17,0,0,263,274,
		3,46,23,0,264,266,5,35,0,0,265,267,5,60,0,0,266,265,1,0,0,0,267,268,1,
		0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,270,1,0,0,0,270,271,5,17,0,0,
		271,272,5,60,0,0,272,274,3,44,22,0,273,256,1,0,0,0,273,264,1,0,0,0,274,
		37,1,0,0,0,275,277,5,33,0,0,276,278,3,46,23,0,277,276,1,0,0,0,278,279,
		1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,39,1,0,0,0,281,282,5,24,0,
		0,282,283,5,25,0,0,283,284,5,26,0,0,284,41,1,0,0,0,285,289,3,46,23,0,286,
		289,5,60,0,0,287,289,5,63,0,0,288,285,1,0,0,0,288,286,1,0,0,0,288,287,
		1,0,0,0,289,43,1,0,0,0,290,291,5,31,0,0,291,292,3,46,23,0,292,45,1,0,0,
		0,293,298,5,59,0,0,294,295,5,23,0,0,295,297,5,59,0,0,296,294,1,0,0,0,297,
		300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,304,1,0,0,0,300,298,1,
		0,0,0,301,302,5,1,0,0,302,303,5,60,0,0,303,305,5,2,0,0,304,301,1,0,0,0,
		304,305,1,0,0,0,305,47,1,0,0,0,306,307,5,32,0,0,307,308,3,46,23,0,308,
		49,1,0,0,0,309,310,5,37,0,0,310,311,3,56,28,0,311,313,5,39,0,0,312,314,
		3,26,13,0,313,312,1,0,0,0,314,315,1,0,0,0,315,313,1,0,0,0,315,316,1,0,
		0,0,316,323,1,0,0,0,317,319,5,38,0,0,318,320,3,26,13,0,319,318,1,0,0,0,
		320,321,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,324,1,0,0,0,323,317,
		1,0,0,0,323,324,1,0,0,0,324,325,1,0,0,0,325,326,5,40,0,0,326,51,1,0,0,
		0,327,328,6,26,-1,0,328,329,3,42,21,0,329,335,1,0,0,0,330,331,10,1,0,0,
		331,332,5,5,0,0,332,334,3,52,26,2,333,330,1,0,0,0,334,337,1,0,0,0,335,
		333,1,0,0,0,335,336,1,0,0,0,336,53,1,0,0,0,337,335,1,0,0,0,338,339,6,27,
		-1,0,339,340,3,42,21,0,340,346,1,0,0,0,341,342,10,1,0,0,342,343,5,3,0,
		0,343,345,3,54,27,2,344,341,1,0,0,0,345,348,1,0,0,0,346,344,1,0,0,0,346,
		347,1,0,0,0,347,55,1,0,0,0,348,346,1,0,0,0,349,350,6,28,-1,0,350,359,5,
		41,0,0,351,359,5,42,0,0,352,353,3,52,26,0,353,354,5,6,0,0,354,355,3,52,
		26,0,355,359,1,0,0,0,356,357,5,43,0,0,357,359,3,56,28,2,358,349,1,0,0,
		0,358,351,1,0,0,0,358,352,1,0,0,0,358,356,1,0,0,0,359,365,1,0,0,0,360,
		361,10,1,0,0,361,362,5,7,0,0,362,364,3,56,28,2,363,360,1,0,0,0,364,367,
		1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,57,1,0,0,0,367,365,1,0,0,0,
		368,372,3,56,28,0,369,372,3,52,26,0,370,372,3,54,27,0,371,368,1,0,0,0,
		371,369,1,0,0,0,371,370,1,0,0,0,372,59,1,0,0,0,373,374,5,47,0,0,374,379,
		3,58,29,0,375,376,5,45,0,0,376,378,3,58,29,0,377,375,1,0,0,0,378,381,1,
		0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,385,1,0,0,0,381,379,1,0,0,0,
		382,384,3,62,31,0,383,382,1,0,0,0,384,387,1,0,0,0,385,383,1,0,0,0,385,
		386,1,0,0,0,386,388,1,0,0,0,387,385,1,0,0,0,388,389,5,40,0,0,389,61,1,
		0,0,0,390,391,5,44,0,0,391,396,3,42,21,0,392,393,5,45,0,0,393,395,3,42,
		21,0,394,392,1,0,0,0,395,398,1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,
		400,1,0,0,0,398,396,1,0,0,0,399,401,3,26,13,0,400,399,1,0,0,0,401,402,
		1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,412,1,0,0,0,404,405,5,44,0,
		0,405,407,5,46,0,0,406,408,3,26,13,0,407,406,1,0,0,0,408,409,1,0,0,0,409,
		407,1,0,0,0,409,410,1,0,0,0,410,412,1,0,0,0,411,390,1,0,0,0,411,404,1,
		0,0,0,412,63,1,0,0,0,413,414,5,48,0,0,414,65,1,0,0,0,415,416,5,49,0,0,
		416,417,5,50,0,0,417,67,1,0,0,0,418,419,5,51,0,0,419,421,3,24,12,0,420,
		422,3,70,35,0,421,420,1,0,0,0,421,422,1,0,0,0,422,69,1,0,0,0,423,424,5,
		60,0,0,424,425,5,11,0,0,425,71,1,0,0,0,426,427,5,53,0,0,427,429,5,63,0,
		0,428,430,3,74,37,0,429,428,1,0,0,0,429,430,1,0,0,0,430,73,1,0,0,0,431,
		433,5,54,0,0,432,434,3,76,38,0,433,432,1,0,0,0,434,435,1,0,0,0,435,433,
		1,0,0,0,435,436,1,0,0,0,436,75,1,0,0,0,437,438,5,64,0,0,438,439,5,16,0,
		0,439,440,5,64,0,0,440,77,1,0,0,0,441,445,5,55,0,0,442,444,3,80,40,0,443,
		442,1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,448,1,
		0,0,0,447,445,1,0,0,0,448,449,5,40,0,0,449,79,1,0,0,0,450,452,5,56,0,0,
		451,453,3,46,23,0,452,451,1,0,0,0,452,453,1,0,0,0,453,456,1,0,0,0,454,
		455,5,17,0,0,455,457,3,42,21,0,456,454,1,0,0,0,456,457,1,0,0,0,457,460,
		1,0,0,0,458,459,5,29,0,0,459,461,3,42,21,0,460,458,1,0,0,0,460,461,1,0,
		0,0,461,464,1,0,0,0,462,463,5,16,0,0,463,465,3,42,21,0,464,462,1,0,0,0,
		464,465,1,0,0,0,465,472,1,0,0,0,466,467,5,57,0,0,467,472,3,56,28,0,468,
		469,5,58,0,0,469,472,3,56,28,0,470,472,3,26,13,0,471,450,1,0,0,0,471,466,
		1,0,0,0,471,468,1,0,0,0,471,470,1,0,0,0,472,81,1,0,0,0,51,84,98,107,114,
		117,137,143,149,160,165,170,189,195,198,204,212,217,225,232,240,254,260,
		268,273,279,288,298,304,315,321,323,335,346,358,365,371,379,385,396,402,
		409,411,421,429,435,445,452,456,460,464,471
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
