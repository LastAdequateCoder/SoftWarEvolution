//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from cobol.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class cobolParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MOVE=1, TO=2, IDENTIFIER=3, FIGURATIVE_VALUE=4;
	public const int
		RULE_moveStatement = 0, RULE_moveFrom = 1, RULE_moveTo = 2;
	public static readonly string[] ruleNames = {
		"moveStatement", "moveFrom", "moveTo"
	};

	private static readonly string[] _LiteralNames = {
		null, "'MOVE'", "'TO'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MOVE", "TO", "IDENTIFIER", "FIGURATIVE_VALUE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "cobol.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static cobolParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public cobolParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public cobolParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MoveStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(cobolParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MoveFromContext moveFrom() {
			return GetRuleContext<MoveFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(cobolParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MoveToContext moveTo() {
			return GetRuleContext<MoveToContext>(0);
		}
		public MoveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterMoveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitMoveStatement(this);
		}
	}

	[RuleVersion(0)]
	public MoveStatementContext moveStatement() {
		MoveStatementContext _localctx = new MoveStatementContext(Context, State);
		EnterRule(_localctx, 0, RULE_moveStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6;
			Match(MOVE);
			State = 7;
			moveFrom();
			State = 8;
			Match(TO);
			State = 9;
			moveTo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(cobolParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIGURATIVE_VALUE() { return GetToken(cobolParser.FIGURATIVE_VALUE, 0); }
		public MoveFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterMoveFrom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitMoveFrom(this);
		}
	}

	[RuleVersion(0)]
	public MoveFromContext moveFrom() {
		MoveFromContext _localctx = new MoveFromContext(Context, State);
		EnterRule(_localctx, 2, RULE_moveFrom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==FIGURATIVE_VALUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveToContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(cobolParser.IDENTIFIER, 0); }
		public MoveToContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveTo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterMoveTo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitMoveTo(this);
		}
	}

	[RuleVersion(0)]
	public MoveToContext moveTo() {
		MoveToContext _localctx = new MoveToContext(Context, State);
		EnterRule(_localctx, 4, RULE_moveTo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,4,16,2,0,7,0,2,1,7,1,2,2,7,2,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,
		2,0,0,3,0,2,4,0,1,1,0,3,4,12,0,6,1,0,0,0,2,11,1,0,0,0,4,13,1,0,0,0,6,7,
		5,1,0,0,7,8,3,2,1,0,8,9,5,2,0,0,9,10,3,4,2,0,10,1,1,0,0,0,11,12,7,0,0,
		0,12,3,1,0,0,0,13,14,5,3,0,0,14,5,1,0,0,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
