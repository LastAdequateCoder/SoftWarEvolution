//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from cobol.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class cobolParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, REPRESENTATION=3, IDENTIFICATION=4, DIVISION=5, OCCURS=6, 
		TIMES=7, PICTURE=8, IS=9, PROCEDURE=10, USING=11, BY=12, REFERENCE=13, 
		CONTENT=14, VALUE=15, LIKE=16, DISPLAY=17, OF=18, WITH=19, NO=20, ADVANCING=21, 
		DATA=22, ADD=23, TO=24, GIVING=25, ACCEPT=26, IDENTIFIER=27, INT=28, SPACE=29, 
		DOT=30, LITERAL=31;
	public const int
		RULE_program = 0, RULE_identification_division = 1, RULE_data_division = 2, 
		RULE_variables = 3, RULE_level = 4, RULE_picture = 5, RULE_like = 6, RULE_procedure_division = 7, 
		RULE_using = 8, RULE_use = 9, RULE_sentence = 10, RULE_statement = 11, 
		RULE_display = 12, RULE_add = 13, RULE_accept = 14, RULE_withnoadvancing = 15, 
		RULE_atomic = 16, RULE_giving = 17, RULE_identifiers = 18;
	public static readonly string[] ruleNames = {
		"program", "identification_division", "data_division", "variables", "level", 
		"picture", "like", "procedure_division", "using", "use", "sentence", "statement", 
		"display", "add", "accept", "withnoadvancing", "atomic", "giving", "identifiers"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "REPRESENTATION", "IDENTIFICATION", "DIVISION", "OCCURS", 
		"TIMES", "PICTURE", "IS", "PROCEDURE", "USING", "BY", "REFERENCE", "CONTENT", 
		"VALUE", "LIKE", "DISPLAY", "OF", "WITH", "NO", "ADVANCING", "DATA", "ADD", 
		"TO", "GIVING", "ACCEPT", "IDENTIFIER", "INT", "SPACE", "DOT", "LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "cobol.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static cobolParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public cobolParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public cobolParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identification_divisionContext identification_division() {
			return GetRuleContext<Identification_divisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(cobolParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_divisionContext procedure_division() {
			return GetRuleContext<Procedure_divisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_divisionContext data_division() {
			return GetRuleContext<Data_divisionContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			identification_division();
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATA) {
				{
				State = 39;
				data_division();
				}
			}

			{
			State = 42;
			procedure_division();
			}
			State = 43;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identification_divisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICATION() { return GetToken(cobolParser.IDENTIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(cobolParser.DIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(cobolParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(cobolParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(cobolParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(cobolParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LITERAL() { return GetTokens(cobolParser.LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL(int i) {
			return GetToken(cobolParser.LITERAL, i);
		}
		public Identification_divisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identification_division; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterIdentification_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitIdentification_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentification_division(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identification_divisionContext identification_division() {
		Identification_divisionContext _localctx = new Identification_divisionContext(Context, State);
		EnterRule(_localctx, 2, RULE_identification_division);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			Match(IDENTIFICATION);
			State = 46;
			Match(DIVISION);
			State = 47;
			Match(DOT);
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 48;
				Match(IDENTIFIER);
				State = 49;
				Match(DOT);
				State = 50;
				Match(LITERAL);
				State = 51;
				Match(DOT);
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_divisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(cobolParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(cobolParser.DIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(cobolParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablesContext[] variables() {
			return GetRuleContexts<VariablesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablesContext variables(int i) {
			return GetRuleContext<VariablesContext>(i);
		}
		public Data_divisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_division; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterData_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitData_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_division(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_divisionContext data_division() {
		Data_divisionContext _localctx = new Data_divisionContext(Context, State);
		EnterRule(_localctx, 4, RULE_data_division);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			Match(DATA);
			State = 58;
			Match(DIVISION);
			State = 59;
			Match(DOT);
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INT) {
				{
				{
				State = 60;
				variables();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LevelContext level() {
			return GetRuleContext<LevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(cobolParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(cobolParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PictureContext picture() {
			return GetRuleContext<PictureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeContext like() {
			return GetRuleContext<LikeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCCURS() { return GetToken(cobolParser.OCCURS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(cobolParser.TIMES, 0); }
		public VariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariablesContext variables() {
		VariablesContext _localctx = new VariablesContext(Context, State);
		EnterRule(_localctx, 6, RULE_variables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 66;
			level();
			State = 67;
			Match(IDENTIFIER);
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PICTURE:
				{
				State = 68;
				picture();
				}
				break;
			case LIKE:
				{
				State = 69;
				like();
				}
				break;
			case OCCURS:
			case DOT:
				break;
			default:
				break;
			}
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OCCURS) {
				{
				State = 72;
				Match(OCCURS);
				State = 73;
				Match(INT);
				State = 74;
				Match(TIMES);
				}
			}

			State = 77;
			Match(DOT);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		public LevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_level; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelContext level() {
		LevelContext _localctx = new LevelContext(Context, State);
		EnterRule(_localctx, 8, RULE_level);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PictureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PICTURE() { return GetToken(cobolParser.PICTURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(cobolParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPRESENTATION() { return GetToken(cobolParser.REPRESENTATION, 0); }
		public PictureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_picture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterPicture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitPicture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPicture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PictureContext picture() {
		PictureContext _localctx = new PictureContext(Context, State);
		EnterRule(_localctx, 10, RULE_picture);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(PICTURE);
			State = 82;
			Match(IS);
			State = 83;
			Match(REPRESENTATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(cobolParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public LikeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_like; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLike(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLike(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLike(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikeContext like() {
		LikeContext _localctx = new LikeContext(Context, State);
		EnterRule(_localctx, 12, RULE_like);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(LIKE);
			State = 86;
			identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_divisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(cobolParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(cobolParser.DIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(cobolParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingContext @using() {
			return GetRuleContext<UsingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenceContext[] sentence() {
			return GetRuleContexts<SentenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenceContext sentence(int i) {
			return GetRuleContext<SentenceContext>(i);
		}
		public Procedure_divisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_division; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterProcedure_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitProcedure_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_division(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_divisionContext procedure_division() {
		Procedure_divisionContext _localctx = new Procedure_divisionContext(Context, State);
		EnterRule(_localctx, 14, RULE_procedure_division);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(PROCEDURE);
			State = 89;
			Match(DIVISION);
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 90;
				@using();
				}
			}

			State = 93;
			Match(DOT);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 94;
				sentence();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 209846272L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(cobolParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UseContext[] use() {
			return GetRuleContexts<UseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseContext use(int i) {
			return GetRuleContext<UseContext>(i);
		}
		public UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterUsing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitUsing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingContext @using() {
		UsingContext _localctx = new UsingContext(Context, State);
		EnterRule(_localctx, 16, RULE_using);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(USING);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 100;
				use();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==BY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(cobolParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(cobolParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTENT() { return GetToken(cobolParser.CONTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic() {
			return GetRuleContext<AtomicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(cobolParser.VALUE, 0); }
		public UseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseContext use() {
		UseContext _localctx = new UseContext(Context, State);
		EnterRule(_localctx, 18, RULE_use);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105;
				Match(BY);
				State = 106;
				Match(REFERENCE);
				State = 107;
				identifiers();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				Match(BY);
				State = 109;
				Match(CONTENT);
				State = 110;
				atomic();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 111;
				Match(BY);
				State = 112;
				Match(VALUE);
				State = 113;
				atomic();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(cobolParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(cobolParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(cobolParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterSentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitSentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenceContext sentence() {
		SentenceContext _localctx = new SentenceContext(Context, State);
		EnterRule(_localctx, 20, RULE_sentence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 116;
				Match(IDENTIFIER);
				State = 117;
				Match(DOT);
				}
			}

			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 120;
				statement();
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 75628544L) != 0) );
			State = 125;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DisplayContext display() {
			return GetRuleContext<DisplayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AcceptContext accept() {
			return GetRuleContext<AcceptContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DISPLAY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				display();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				add();
				}
				break;
			case ACCEPT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 129;
				accept();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisplayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISPLAY() { return GetToken(cobolParser.DISPLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext[] atomic() {
			return GetRuleContexts<AtomicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic(int i) {
			return GetRuleContext<AtomicContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithnoadvancingContext withnoadvancing() {
			return GetRuleContext<WithnoadvancingContext>(0);
		}
		public DisplayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_display; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterDisplay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitDisplay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisplayContext display() {
		DisplayContext _localctx = new DisplayContext(Context, State);
		EnterRule(_localctx, 24, RULE_display);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(DISPLAY);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 133;
				atomic();
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 2550136832L) != 0) );
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 138;
				withnoadvancing();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public IToken _INT;
		public IList<IToken> _additions = new List<IToken>();
		public IToken @base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(cobolParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(cobolParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(cobolParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(cobolParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GivingContext giving() {
			return GetRuleContext<GivingContext>(0);
		}
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 26, RULE_add);
		int _la;
		try {
			State = 158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 141;
				Match(ADD);
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 142;
					_localctx._INT = Match(INT);
					_localctx._additions.Add(_localctx._INT);
					}
					}
					State = 145;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==INT );
				State = 147;
				Match(TO);
				State = 148;
				identifiers();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149;
				Match(ADD);
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 150;
					_localctx._INT = Match(INT);
					_localctx._additions.Add(_localctx._INT);
					}
					}
					State = 153;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==INT );
				State = 155;
				Match(TO);
				State = 156;
				_localctx.@base = Match(INT);
				State = 157;
				giving();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AcceptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCEPT() { return GetToken(cobolParser.ACCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext[] identifiers() {
			return GetRuleContexts<IdentifiersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers(int i) {
			return GetRuleContext<IdentifiersContext>(i);
		}
		public AcceptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accept; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterAccept(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitAccept(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccept(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AcceptContext accept() {
		AcceptContext _localctx = new AcceptContext(Context, State);
		EnterRule(_localctx, 28, RULE_accept);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(ACCEPT);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 161;
				identifiers();
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithnoadvancingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(cobolParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(cobolParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADVANCING() { return GetToken(cobolParser.ADVANCING, 0); }
		public WithnoadvancingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withnoadvancing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterWithnoadvancing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitWithnoadvancing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithnoadvancing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithnoadvancingContext withnoadvancing() {
		WithnoadvancingContext _localctx = new WithnoadvancingContext(Context, State);
		EnterRule(_localctx, 30, RULE_withnoadvancing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(WITH);
			State = 167;
			Match(NO);
			State = 168;
			Match(ADVANCING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(cobolParser.LITERAL, 0); }
		public AtomicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicContext atomic() {
		AtomicContext _localctx = new AtomicContext(Context, State);
		EnterRule(_localctx, 32, RULE_atomic);
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170;
				identifiers();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171;
				Match(INT);
				}
				break;
			case LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 172;
				Match(LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GivingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GIVING() { return GetToken(cobolParser.GIVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public GivingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_giving; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterGiving(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitGiving(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGiving(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GivingContext giving() {
		GivingContext _localctx = new GivingContext(Context, State);
		EnterRule(_localctx, 34, RULE_giving);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			Match(GIVING);
			State = 176;
			identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(cobolParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(cobolParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OF() { return GetTokens(cobolParser.OF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF(int i) {
			return GetToken(cobolParser.OF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		public IdentifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterIdentifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitIdentifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiersContext identifiers() {
		IdentifiersContext _localctx = new IdentifiersContext(Context, State);
		EnterRule(_localctx, 36, RULE_identifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(IDENTIFIER);
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OF) {
				{
				{
				State = 179;
				Match(OF);
				State = 180;
				Match(IDENTIFIER);
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 186;
				Match(T__0);
				State = 187;
				Match(INT);
				State = 188;
				Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,31,192,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,3,0,41,8,0,1,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,53,8,1,10,1,12,1,56,9,1,1,2,1,2,1,2,1,
		2,5,2,62,8,2,10,2,12,2,65,9,2,1,3,1,3,1,3,1,3,3,3,71,8,3,1,3,1,3,1,3,3,
		3,76,8,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,3,7,92,
		8,7,1,7,1,7,4,7,96,8,7,11,7,12,7,97,1,8,1,8,4,8,102,8,8,11,8,12,8,103,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,115,8,9,1,10,1,10,3,10,119,8,10,
		1,10,4,10,122,8,10,11,10,12,10,123,1,10,1,10,1,11,1,11,1,11,3,11,131,8,
		11,1,12,1,12,4,12,135,8,12,11,12,12,12,136,1,12,3,12,140,8,12,1,13,1,13,
		4,13,144,8,13,11,13,12,13,145,1,13,1,13,1,13,1,13,4,13,152,8,13,11,13,
		12,13,153,1,13,1,13,1,13,3,13,159,8,13,1,14,1,14,4,14,163,8,14,11,14,12,
		14,164,1,15,1,15,1,15,1,15,1,16,1,16,1,16,3,16,174,8,16,1,17,1,17,1,17,
		1,18,1,18,1,18,5,18,182,8,18,10,18,12,18,185,9,18,1,18,1,18,1,18,3,18,
		190,8,18,1,18,0,0,19,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,0,0,197,0,38,1,0,0,0,2,45,1,0,0,0,4,57,1,0,0,0,6,66,1,0,0,0,8,79,1,
		0,0,0,10,81,1,0,0,0,12,85,1,0,0,0,14,88,1,0,0,0,16,99,1,0,0,0,18,114,1,
		0,0,0,20,118,1,0,0,0,22,130,1,0,0,0,24,132,1,0,0,0,26,158,1,0,0,0,28,160,
		1,0,0,0,30,166,1,0,0,0,32,173,1,0,0,0,34,175,1,0,0,0,36,178,1,0,0,0,38,
		40,3,2,1,0,39,41,3,4,2,0,40,39,1,0,0,0,40,41,1,0,0,0,41,42,1,0,0,0,42,
		43,3,14,7,0,43,44,5,0,0,1,44,1,1,0,0,0,45,46,5,4,0,0,46,47,5,5,0,0,47,
		54,5,30,0,0,48,49,5,27,0,0,49,50,5,30,0,0,50,51,5,31,0,0,51,53,5,30,0,
		0,52,48,1,0,0,0,53,56,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,3,1,0,0,0,
		56,54,1,0,0,0,57,58,5,22,0,0,58,59,5,5,0,0,59,63,5,30,0,0,60,62,3,6,3,
		0,61,60,1,0,0,0,62,65,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,5,1,0,0,0,
		65,63,1,0,0,0,66,67,3,8,4,0,67,70,5,27,0,0,68,71,3,10,5,0,69,71,3,12,6,
		0,70,68,1,0,0,0,70,69,1,0,0,0,70,71,1,0,0,0,71,75,1,0,0,0,72,73,5,6,0,
		0,73,74,5,28,0,0,74,76,5,7,0,0,75,72,1,0,0,0,75,76,1,0,0,0,76,77,1,0,0,
		0,77,78,5,30,0,0,78,7,1,0,0,0,79,80,5,28,0,0,80,9,1,0,0,0,81,82,5,8,0,
		0,82,83,5,9,0,0,83,84,5,3,0,0,84,11,1,0,0,0,85,86,5,16,0,0,86,87,3,36,
		18,0,87,13,1,0,0,0,88,89,5,10,0,0,89,91,5,5,0,0,90,92,3,16,8,0,91,90,1,
		0,0,0,91,92,1,0,0,0,92,93,1,0,0,0,93,95,5,30,0,0,94,96,3,20,10,0,95,94,
		1,0,0,0,96,97,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,15,1,0,0,0,99,101,
		5,11,0,0,100,102,3,18,9,0,101,100,1,0,0,0,102,103,1,0,0,0,103,101,1,0,
		0,0,103,104,1,0,0,0,104,17,1,0,0,0,105,106,5,12,0,0,106,107,5,13,0,0,107,
		115,3,36,18,0,108,109,5,12,0,0,109,110,5,14,0,0,110,115,3,32,16,0,111,
		112,5,12,0,0,112,113,5,15,0,0,113,115,3,32,16,0,114,105,1,0,0,0,114,108,
		1,0,0,0,114,111,1,0,0,0,115,19,1,0,0,0,116,117,5,27,0,0,117,119,5,30,0,
		0,118,116,1,0,0,0,118,119,1,0,0,0,119,121,1,0,0,0,120,122,3,22,11,0,121,
		120,1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,125,1,
		0,0,0,125,126,5,30,0,0,126,21,1,0,0,0,127,131,3,24,12,0,128,131,3,26,13,
		0,129,131,3,28,14,0,130,127,1,0,0,0,130,128,1,0,0,0,130,129,1,0,0,0,131,
		23,1,0,0,0,132,134,5,17,0,0,133,135,3,32,16,0,134,133,1,0,0,0,135,136,
		1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,139,1,0,0,0,138,140,3,30,15,
		0,139,138,1,0,0,0,139,140,1,0,0,0,140,25,1,0,0,0,141,143,5,23,0,0,142,
		144,5,28,0,0,143,142,1,0,0,0,144,145,1,0,0,0,145,143,1,0,0,0,145,146,1,
		0,0,0,146,147,1,0,0,0,147,148,5,24,0,0,148,159,3,36,18,0,149,151,5,23,
		0,0,150,152,5,28,0,0,151,150,1,0,0,0,152,153,1,0,0,0,153,151,1,0,0,0,153,
		154,1,0,0,0,154,155,1,0,0,0,155,156,5,24,0,0,156,157,5,28,0,0,157,159,
		3,34,17,0,158,141,1,0,0,0,158,149,1,0,0,0,159,27,1,0,0,0,160,162,5,26,
		0,0,161,163,3,36,18,0,162,161,1,0,0,0,163,164,1,0,0,0,164,162,1,0,0,0,
		164,165,1,0,0,0,165,29,1,0,0,0,166,167,5,19,0,0,167,168,5,20,0,0,168,169,
		5,21,0,0,169,31,1,0,0,0,170,174,3,36,18,0,171,174,5,28,0,0,172,174,5,31,
		0,0,173,170,1,0,0,0,173,171,1,0,0,0,173,172,1,0,0,0,174,33,1,0,0,0,175,
		176,5,25,0,0,176,177,3,36,18,0,177,35,1,0,0,0,178,183,5,27,0,0,179,180,
		5,18,0,0,180,182,5,27,0,0,181,179,1,0,0,0,182,185,1,0,0,0,183,181,1,0,
		0,0,183,184,1,0,0,0,184,189,1,0,0,0,185,183,1,0,0,0,186,187,5,1,0,0,187,
		188,5,28,0,0,188,190,5,2,0,0,189,186,1,0,0,0,189,190,1,0,0,0,190,37,1,
		0,0,0,21,40,54,63,70,75,91,97,103,114,118,123,130,136,139,145,153,158,
		164,173,183,189
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
