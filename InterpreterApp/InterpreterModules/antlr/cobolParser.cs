//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from cobol.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class cobolParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, REPRESENTATION=4, ARITHMETIC_OPERATOR=5, COMPARISON_OPERATOR=6, 
		BOOLEAN_OPERATOR=7, IDENTIFICATION=8, DIVISION=9, OCCURS=10, TIMES=11, 
		PICTURE=12, IS=13, PROCEDURE=14, USING=15, BY=16, FROM=17, REFERENCE=18, 
		CONTENT=19, VALUE=20, LIKE=21, DISPLAY=22, OF=23, WITH=24, NO=25, ADVANCING=26, 
		DATA=27, ADD=28, TO=29, INTO=30, GIVING=31, REMAINDER=32, ACCEPT=33, MULTIPLY=34, 
		SUBTRACT=35, DIVIDE=36, IF=37, ELSE=38, THEN=39, END=40, TRUE=41, FALSE=42, 
		NOT=43, WHEN=44, ALSO=45, OTHER=46, EVALUATE=47, STOP=48, NEXT=49, SENTENCE=50, 
		PERFORM=51, THROUGH=52, COPY=53, REPLACING=54, LOOP=55, VARYING=56, WHILE=57, 
		UNTIL=58, GO=59, IDENTIFIER=60, INT=61, SPACE=62, DOT=63, LITERAL=64, 
		COPY_LITERAL=65;
	public const int
		RULE_program = 0, RULE_identification_division = 1, RULE_data_division = 2, 
		RULE_variables = 3, RULE_occurs = 4, RULE_level = 5, RULE_picture = 6, 
		RULE_like = 7, RULE_procedure_division = 8, RULE_using = 9, RULE_use = 10, 
		RULE_sentence = 11, RULE_proc = 12, RULE_statement = 13, RULE_display = 14, 
		RULE_add = 15, RULE_multiply = 16, RULE_divide = 17, RULE_subtract = 18, 
		RULE_accept = 19, RULE_withnoadvancing = 20, RULE_atomic = 21, RULE_giving = 22, 
		RULE_identifiers = 23, RULE_remainder = 24, RULE_if = 25, RULE_arithmetic_expression = 26, 
		RULE_string_expression = 27, RULE_boolean = 28, RULE_expressions = 29, 
		RULE_evaluate = 30, RULE_when_block = 31, RULE_stop = 32, RULE_next_sentence = 33, 
		RULE_perform = 34, RULE_through = 35, RULE_times = 36, RULE_copy = 37, 
		RULE_replacing = 38, RULE_replacements = 39, RULE_loop = 40, RULE_loop_expression = 41, 
		RULE_goto = 42;
	public static readonly string[] ruleNames = {
		"program", "identification_division", "data_division", "variables", "occurs", 
		"level", "picture", "like", "procedure_division", "using", "use", "sentence", 
		"proc", "statement", "display", "add", "multiply", "divide", "subtract", 
		"accept", "withnoadvancing", "atomic", "giving", "identifiers", "remainder", 
		"if", "arithmetic_expression", "string_expression", "boolean", "expressions", 
		"evaluate", "when_block", "stop", "next_sentence", "perform", "through", 
		"times", "copy", "replacing", "replacements", "loop", "loop_expression", 
		"goto"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "REPRESENTATION", "ARITHMETIC_OPERATOR", "COMPARISON_OPERATOR", 
		"BOOLEAN_OPERATOR", "IDENTIFICATION", "DIVISION", "OCCURS", "TIMES", "PICTURE", 
		"IS", "PROCEDURE", "USING", "BY", "FROM", "REFERENCE", "CONTENT", "VALUE", 
		"LIKE", "DISPLAY", "OF", "WITH", "NO", "ADVANCING", "DATA", "ADD", "TO", 
		"INTO", "GIVING", "REMAINDER", "ACCEPT", "MULTIPLY", "SUBTRACT", "DIVIDE", 
		"IF", "ELSE", "THEN", "END", "TRUE", "FALSE", "NOT", "WHEN", "ALSO", "OTHER", 
		"EVALUATE", "STOP", "NEXT", "SENTENCE", "PERFORM", "THROUGH", "COPY", 
		"REPLACING", "LOOP", "VARYING", "WHILE", "UNTIL", "GO", "IDENTIFIER", 
		"INT", "SPACE", "DOT", "LITERAL", "COPY_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "cobol.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static cobolParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public cobolParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public cobolParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identification_divisionContext identification_division() {
			return GetRuleContext<Identification_divisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(cobolParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_divisionContext procedure_division() {
			return GetRuleContext<Procedure_divisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_divisionContext data_division() {
			return GetRuleContext<Data_divisionContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			identification_division();
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATA) {
				{
				State = 87;
				data_division();
				}
			}

			{
			State = 90;
			procedure_division();
			}
			State = 91;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identification_divisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICATION() { return GetToken(cobolParser.IDENTIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(cobolParser.DIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(cobolParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(cobolParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(cobolParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(cobolParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LITERAL() { return GetTokens(cobolParser.LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL(int i) {
			return GetToken(cobolParser.LITERAL, i);
		}
		public Identification_divisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identification_division; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterIdentification_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitIdentification_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentification_division(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identification_divisionContext identification_division() {
		Identification_divisionContext _localctx = new Identification_divisionContext(Context, State);
		EnterRule(_localctx, 2, RULE_identification_division);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(IDENTIFICATION);
			State = 94;
			Match(DIVISION);
			State = 95;
			Match(DOT);
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 96;
				Match(IDENTIFIER);
				State = 97;
				Match(DOT);
				State = 98;
				Match(LITERAL);
				State = 99;
				Match(DOT);
				}
				}
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_divisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(cobolParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(cobolParser.DIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(cobolParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablesContext[] variables() {
			return GetRuleContexts<VariablesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablesContext variables(int i) {
			return GetRuleContext<VariablesContext>(i);
		}
		public Data_divisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_division; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterData_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitData_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_division(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_divisionContext data_division() {
		Data_divisionContext _localctx = new Data_divisionContext(Context, State);
		EnterRule(_localctx, 4, RULE_data_division);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(DATA);
			State = 106;
			Match(DIVISION);
			State = 107;
			Match(DOT);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INT) {
				{
				{
				State = 108;
				variables();
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LevelContext level() {
			return GetRuleContext<LevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(cobolParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(cobolParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PictureContext picture() {
			return GetRuleContext<PictureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeContext like() {
			return GetRuleContext<LikeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OccursContext occurs() {
			return GetRuleContext<OccursContext>(0);
		}
		public VariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariablesContext variables() {
		VariablesContext _localctx = new VariablesContext(Context, State);
		EnterRule(_localctx, 6, RULE_variables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 114;
			level();
			State = 115;
			Match(IDENTIFIER);
			State = 118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PICTURE:
				{
				State = 116;
				picture();
				}
				break;
			case LIKE:
				{
				State = 117;
				like();
				}
				break;
			case OCCURS:
			case DOT:
				break;
			default:
				break;
			}
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OCCURS) {
				{
				State = 120;
				occurs();
				}
			}

			State = 123;
			Match(DOT);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OccursContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCCURS() { return GetToken(cobolParser.OCCURS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(cobolParser.TIMES, 0); }
		public OccursContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_occurs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterOccurs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitOccurs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOccurs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OccursContext occurs() {
		OccursContext _localctx = new OccursContext(Context, State);
		EnterRule(_localctx, 8, RULE_occurs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(OCCURS);
			State = 126;
			Match(INT);
			State = 127;
			Match(TIMES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		public LevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_level; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelContext level() {
		LevelContext _localctx = new LevelContext(Context, State);
		EnterRule(_localctx, 10, RULE_level);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PictureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PICTURE() { return GetToken(cobolParser.PICTURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(cobolParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPRESENTATION() { return GetToken(cobolParser.REPRESENTATION, 0); }
		public PictureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_picture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterPicture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitPicture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPicture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PictureContext picture() {
		PictureContext _localctx = new PictureContext(Context, State);
		EnterRule(_localctx, 12, RULE_picture);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(PICTURE);
			State = 132;
			Match(IS);
			State = 133;
			Match(REPRESENTATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(cobolParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public LikeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_like; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLike(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLike(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLike(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikeContext like() {
		LikeContext _localctx = new LikeContext(Context, State);
		EnterRule(_localctx, 14, RULE_like);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(LIKE);
			State = 136;
			identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_divisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(cobolParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(cobolParser.DIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(cobolParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingContext @using() {
			return GetRuleContext<UsingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenceContext[] sentence() {
			return GetRuleContexts<SentenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenceContext sentence(int i) {
			return GetRuleContext<SentenceContext>(i);
		}
		public Procedure_divisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_division; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterProcedure_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitProcedure_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_division(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_divisionContext procedure_division() {
		Procedure_divisionContext _localctx = new Procedure_divisionContext(Context, State);
		EnterRule(_localctx, 16, RULE_procedure_division);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(PROCEDURE);
			State = 139;
			Match(DIVISION);
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 140;
				@using();
				}
			}

			State = 143;
			Match(DOT);
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 144;
				sentence();
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1777655481976750080L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(cobolParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UseContext[] use() {
			return GetRuleContexts<UseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseContext use(int i) {
			return GetRuleContext<UseContext>(i);
		}
		public UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterUsing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitUsing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingContext @using() {
		UsingContext _localctx = new UsingContext(Context, State);
		EnterRule(_localctx, 18, RULE_using);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(USING);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 150;
				use();
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==BY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(cobolParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(cobolParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTENT() { return GetToken(cobolParser.CONTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic() {
			return GetRuleContext<AtomicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(cobolParser.VALUE, 0); }
		public UseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseContext use() {
		UseContext _localctx = new UseContext(Context, State);
		EnterRule(_localctx, 20, RULE_use);
		try {
			State = 164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155;
				Match(BY);
				State = 156;
				Match(REFERENCE);
				State = 157;
				identifiers();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158;
				Match(BY);
				State = 159;
				Match(CONTENT);
				State = 160;
				atomic();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 161;
				Match(BY);
				State = 162;
				Match(VALUE);
				State = 163;
				atomic();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(cobolParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(cobolParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcContext proc() {
			return GetRuleContext<ProcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterSentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitSentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenceContext sentence() {
		SentenceContext _localctx = new SentenceContext(Context, State);
		EnterRule(_localctx, 22, RULE_sentence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 166;
				proc();
				State = 167;
				Match(DOT);
				}
			}

			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 171;
				statement();
				}
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 624733977369903104L) != 0) );
			State = 176;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(cobolParser.IDENTIFIER, 0); }
		public ProcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterProc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitProc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcContext proc() {
		ProcContext _localctx = new ProcContext(Context, State);
		EnterRule(_localctx, 24, RULE_proc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DisplayContext display() {
			return GetRuleContext<DisplayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AcceptContext accept() {
			return GetRuleContext<AcceptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyContext multiply() {
			return GetRuleContext<MultiplyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EvaluateContext evaluate() {
			return GetRuleContext<EvaluateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopContext stop() {
			return GetRuleContext<StopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Next_sentenceContext next_sentence() {
			return GetRuleContext<Next_sentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PerformContext perform() {
			return GetRuleContext<PerformContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyContext copy() {
			return GetRuleContext<CopyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoContext @goto() {
			return GetRuleContext<GotoContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_statement);
		try {
			State = 194;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DISPLAY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180;
				display();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 181;
				add();
				}
				break;
			case ACCEPT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 182;
				accept();
				}
				break;
			case MULTIPLY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 183;
				multiply();
				}
				break;
			case SUBTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 184;
				subtract();
				}
				break;
			case DIVIDE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 185;
				divide();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 7);
				{
				State = 186;
				@if();
				}
				break;
			case EVALUATE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 187;
				evaluate();
				}
				break;
			case STOP:
				EnterOuterAlt(_localctx, 9);
				{
				State = 188;
				stop();
				}
				break;
			case NEXT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 189;
				next_sentence();
				}
				break;
			case PERFORM:
				EnterOuterAlt(_localctx, 11);
				{
				State = 190;
				perform();
				}
				break;
			case COPY:
				EnterOuterAlt(_localctx, 12);
				{
				State = 191;
				copy();
				}
				break;
			case LOOP:
				EnterOuterAlt(_localctx, 13);
				{
				State = 192;
				loop();
				}
				break;
			case GO:
				EnterOuterAlt(_localctx, 14);
				{
				State = 193;
				@goto();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisplayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISPLAY() { return GetToken(cobolParser.DISPLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext[] atomic() {
			return GetRuleContexts<AtomicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic(int i) {
			return GetRuleContext<AtomicContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithnoadvancingContext withnoadvancing() {
			return GetRuleContext<WithnoadvancingContext>(0);
		}
		public DisplayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_display; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterDisplay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitDisplay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisplayContext display() {
		DisplayContext _localctx = new DisplayContext(Context, State);
		EnterRule(_localctx, 28, RULE_display);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(DISPLAY);
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 197;
				atomic();
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & 19L) != 0) );
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 202;
				withnoadvancing();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public IToken _INT;
		public IList<IToken> _additions = new List<IToken>();
		public IToken @base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(cobolParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(cobolParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(cobolParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(cobolParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GivingContext giving() {
			return GetRuleContext<GivingContext>(0);
		}
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 30, RULE_add);
		int _la;
		try {
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205;
				Match(ADD);
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 206;
					_localctx._INT = Match(INT);
					_localctx._additions.Add(_localctx._INT);
					}
					}
					State = 209;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==INT );
				State = 211;
				Match(TO);
				State = 212;
				identifiers();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213;
				Match(ADD);
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 214;
					_localctx._INT = Match(INT);
					_localctx._additions.Add(_localctx._INT);
					}
					}
					State = 217;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==INT );
				State = 219;
				Match(TO);
				State = 220;
				_localctx.@base = Match(INT);
				State = 221;
				giving();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyContext : ParserRuleContext {
		public IToken multiplier;
		public IToken @base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(cobolParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(cobolParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(cobolParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(cobolParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext[] identifiers() {
			return GetRuleContexts<IdentifiersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers(int i) {
			return GetRuleContext<IdentifiersContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GivingContext giving() {
			return GetRuleContext<GivingContext>(0);
		}
		public MultiplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiply; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterMultiply(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitMultiply(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyContext multiply() {
		MultiplyContext _localctx = new MultiplyContext(Context, State);
		EnterRule(_localctx, 32, RULE_multiply);
		int _la;
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224;
				Match(MULTIPLY);
				State = 225;
				_localctx.multiplier = Match(INT);
				State = 226;
				Match(BY);
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 227;
					identifiers();
					}
					}
					State = 230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==IDENTIFIER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232;
				Match(MULTIPLY);
				State = 233;
				_localctx.multiplier = Match(INT);
				State = 234;
				Match(BY);
				State = 235;
				_localctx.@base = Match(INT);
				State = 236;
				giving();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public IToken divisor;
		public IToken @base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(cobolParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(cobolParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(cobolParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(cobolParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext[] identifiers() {
			return GetRuleContexts<IdentifiersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers(int i) {
			return GetRuleContext<IdentifiersContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GivingContext giving() {
			return GetRuleContext<GivingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemainderContext remainder() {
			return GetRuleContext<RemainderContext>(0);
		}
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 34, RULE_divide);
		int _la;
		try {
			State = 259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239;
				Match(DIVIDE);
				State = 240;
				_localctx.divisor = Match(INT);
				State = 241;
				Match(INTO);
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 242;
					identifiers();
					}
					}
					State = 245;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==IDENTIFIER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				Match(DIVIDE);
				State = 248;
				_localctx.divisor = Match(INT);
				State = 249;
				Match(INTO);
				State = 250;
				_localctx.@base = Match(INT);
				State = 251;
				giving();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 252;
				Match(DIVIDE);
				State = 253;
				_localctx.divisor = Match(INT);
				State = 254;
				Match(INTO);
				State = 255;
				_localctx.@base = Match(INT);
				State = 256;
				giving();
				State = 257;
				remainder();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		public IToken _INT;
		public IList<IToken> _subtractors = new List<IToken>();
		public IToken @base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(cobolParser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(cobolParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(cobolParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(cobolParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GivingContext giving() {
			return GetRuleContext<GivingContext>(0);
		}
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 36, RULE_subtract);
		int _la;
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 261;
				Match(SUBTRACT);
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 262;
					_localctx._INT = Match(INT);
					_localctx._subtractors.Add(_localctx._INT);
					}
					}
					State = 265;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==INT );
				State = 267;
				Match(FROM);
				State = 268;
				identifiers();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269;
				Match(SUBTRACT);
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 270;
					_localctx._INT = Match(INT);
					_localctx._subtractors.Add(_localctx._INT);
					}
					}
					State = 273;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==INT );
				State = 275;
				Match(FROM);
				State = 276;
				_localctx.@base = Match(INT);
				State = 277;
				giving();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AcceptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCEPT() { return GetToken(cobolParser.ACCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext[] identifiers() {
			return GetRuleContexts<IdentifiersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers(int i) {
			return GetRuleContext<IdentifiersContext>(i);
		}
		public AcceptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accept; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterAccept(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitAccept(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccept(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AcceptContext accept() {
		AcceptContext _localctx = new AcceptContext(Context, State);
		EnterRule(_localctx, 38, RULE_accept);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(ACCEPT);
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 281;
				identifiers();
				}
				}
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithnoadvancingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(cobolParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(cobolParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADVANCING() { return GetToken(cobolParser.ADVANCING, 0); }
		public WithnoadvancingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withnoadvancing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterWithnoadvancing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitWithnoadvancing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithnoadvancing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithnoadvancingContext withnoadvancing() {
		WithnoadvancingContext _localctx = new WithnoadvancingContext(Context, State);
		EnterRule(_localctx, 40, RULE_withnoadvancing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			Match(WITH);
			State = 287;
			Match(NO);
			State = 288;
			Match(ADVANCING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(cobolParser.LITERAL, 0); }
		public AtomicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicContext atomic() {
		AtomicContext _localctx = new AtomicContext(Context, State);
		EnterRule(_localctx, 42, RULE_atomic);
		try {
			State = 293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 290;
				identifiers();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 291;
				Match(INT);
				}
				break;
			case LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 292;
				Match(LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GivingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GIVING() { return GetToken(cobolParser.GIVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public GivingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_giving; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterGiving(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitGiving(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGiving(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GivingContext giving() {
		GivingContext _localctx = new GivingContext(Context, State);
		EnterRule(_localctx, 44, RULE_giving);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(GIVING);
			State = 296;
			identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(cobolParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(cobolParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OF() { return GetTokens(cobolParser.OF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF(int i) {
			return GetToken(cobolParser.OF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		public IdentifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterIdentifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitIdentifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiersContext identifiers() {
		IdentifiersContext _localctx = new IdentifiersContext(Context, State);
		EnterRule(_localctx, 46, RULE_identifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			Match(IDENTIFIER);
			State = 303;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 299;
					Match(OF);
					State = 300;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 305;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			State = 309;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 306;
				Match(T__0);
				State = 307;
				Match(INT);
				State = 308;
				Match(T__1);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemainderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMAINDER() { return GetToken(cobolParser.REMAINDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public RemainderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remainder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterRemainder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitRemainder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemainder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemainderContext remainder() {
		RemainderContext _localctx = new RemainderContext(Context, State);
		EnterRule(_localctx, 48, RULE_remainder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			Match(REMAINDER);
			State = 312;
			identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _i = new List<StatementContext>();
		public IList<StatementContext> _e = new List<StatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(cobolParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(cobolParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(cobolParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(cobolParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 50, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(IF);
			State = 315;
			boolean(0);
			State = 316;
			Match(THEN);
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 317;
				_localctx._statement = statement();
				_localctx._i.Add(_localctx._statement);
				}
				}
				State = 320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 624733977369903104L) != 0) );
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 322;
				Match(ELSE);
				State = 324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 323;
					_localctx._statement = statement();
					_localctx._e.Add(_localctx._statement);
					}
					}
					State = 326;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 624733977369903104L) != 0) );
				}
			}

			State = 330;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic() {
			return GetRuleContext<AtomicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARITHMETIC_OPERATOR() { return GetToken(cobolParser.ARITHMETIC_OPERATOR, 0); }
		public Arithmetic_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterArithmetic_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitArithmetic_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmetic_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_expressionContext arithmetic_expression() {
		return arithmetic_expression(0);
	}

	private Arithmetic_expressionContext arithmetic_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Arithmetic_expressionContext _localctx = new Arithmetic_expressionContext(Context, _parentState);
		Arithmetic_expressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_arithmetic_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 333;
			atomic();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 340;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Arithmetic_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
					State = 335;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 336;
					Match(ARITHMETIC_OPERATOR);
					State = 337;
					arithmetic_expression(2);
					}
					} 
				}
				State = 342;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class String_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic() {
			return GetRuleContext<AtomicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_expressionContext[] string_expression() {
			return GetRuleContexts<String_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_expressionContext string_expression(int i) {
			return GetRuleContext<String_expressionContext>(i);
		}
		public String_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterString_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitString_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_expressionContext string_expression() {
		return string_expression(0);
	}

	private String_expressionContext string_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		String_expressionContext _localctx = new String_expressionContext(Context, _parentState);
		String_expressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_string_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 344;
			atomic();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 351;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new String_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_string_expression);
					State = 346;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 347;
					Match(T__2);
					State = 348;
					string_expression(2);
					}
					} 
				}
				State = 353;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(cobolParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(cobolParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARISON_OPERATOR() { return GetToken(cobolParser.COMPARISON_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(cobolParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_OPERATOR() { return GetToken(cobolParser.BOOLEAN_OPERATOR, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		return boolean(0);
	}

	private BooleanContext boolean(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BooleanContext _localctx = new BooleanContext(Context, _parentState);
		BooleanContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_boolean, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
				{
				State = 355;
				Match(TRUE);
				}
				break;
			case FALSE:
				{
				State = 356;
				Match(FALSE);
				}
				break;
			case IDENTIFIER:
			case INT:
			case LITERAL:
				{
				State = 357;
				arithmetic_expression(0);
				State = 358;
				Match(COMPARISON_OPERATOR);
				State = 359;
				arithmetic_expression(0);
				}
				break;
			case NOT:
				{
				State = 361;
				Match(NOT);
				State = 362;
				boolean(2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 370;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BooleanContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_boolean);
					State = 365;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 366;
					Match(BOOLEAN_OPERATOR);
					State = 367;
					boolean(2);
					}
					} 
				}
				State = 372;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_expressionContext string_expression() {
			return GetRuleContext<String_expressionContext>(0);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 58, RULE_expressions);
		try {
			State = 376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 373;
				boolean(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 374;
				arithmetic_expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 375;
				string_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvaluateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVALUATE() { return GetToken(cobolParser.EVALUATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext[] expressions() {
			return GetRuleContexts<ExpressionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions(int i) {
			return GetRuleContext<ExpressionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(cobolParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALSO() { return GetTokens(cobolParser.ALSO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALSO(int i) {
			return GetToken(cobolParser.ALSO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_blockContext[] when_block() {
			return GetRuleContexts<When_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_blockContext when_block(int i) {
			return GetRuleContext<When_blockContext>(i);
		}
		public EvaluateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterEvaluate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitEvaluate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluateContext evaluate() {
		EvaluateContext _localctx = new EvaluateContext(Context, State);
		EnterRule(_localctx, 60, RULE_evaluate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(EVALUATE);
			State = 379;
			expressions();
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ALSO) {
				{
				{
				State = 380;
				Match(ALSO);
				State = 381;
				expressions();
				}
				}
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHEN) {
				{
				{
				State = 387;
				when_block();
				}
				}
				State = 392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 393;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(cobolParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext[] atomic() {
			return GetRuleContexts<AtomicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic(int i) {
			return GetRuleContext<AtomicContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALSO() { return GetTokens(cobolParser.ALSO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALSO(int i) {
			return GetToken(cobolParser.ALSO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHER() { return GetToken(cobolParser.OTHER, 0); }
		public When_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterWhen_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitWhen_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhen_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public When_blockContext when_block() {
		When_blockContext _localctx = new When_blockContext(Context, State);
		EnterRule(_localctx, 62, RULE_when_block);
		int _la;
		try {
			State = 416;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 395;
				Match(WHEN);
				State = 396;
				atomic();
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ALSO) {
					{
					{
					State = 397;
					Match(ALSO);
					State = 398;
					atomic();
					}
					}
					State = 403;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 404;
					statement();
					}
					}
					State = 407;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 624733977369903104L) != 0) );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 409;
				Match(WHEN);
				State = 410;
				Match(OTHER);
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 411;
					statement();
					}
					}
					State = 414;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 624733977369903104L) != 0) );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(cobolParser.STOP, 0); }
		public StopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterStop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitStop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopContext stop() {
		StopContext _localctx = new StopContext(Context, State);
		EnterRule(_localctx, 64, RULE_stop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Next_sentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(cobolParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SENTENCE() { return GetToken(cobolParser.SENTENCE, 0); }
		public Next_sentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_next_sentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterNext_sentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitNext_sentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNext_sentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Next_sentenceContext next_sentence() {
		Next_sentenceContext _localctx = new Next_sentenceContext(Context, State);
		EnterRule(_localctx, 66, RULE_next_sentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			Match(NEXT);
			State = 421;
			Match(SENTENCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PerformContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERFORM() { return GetToken(cobolParser.PERFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcContext proc() {
			return GetRuleContext<ProcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThroughContext through() {
			return GetRuleContext<ThroughContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimesContext times() {
			return GetRuleContext<TimesContext>(0);
		}
		public PerformContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_perform; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterPerform(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitPerform(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPerform(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PerformContext perform() {
		PerformContext _localctx = new PerformContext(Context, State);
		EnterRule(_localctx, 68, RULE_perform);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			Match(PERFORM);
			State = 424;
			proc();
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROUGH) {
				{
				State = 425;
				through();
				}
			}

			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT) {
				{
				State = 428;
				times();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThroughContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROUGH() { return GetToken(cobolParser.THROUGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcContext proc() {
			return GetRuleContext<ProcContext>(0);
		}
		public ThroughContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_through; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterThrough(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitThrough(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrough(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThroughContext through() {
		ThroughContext _localctx = new ThroughContext(Context, State);
		EnterRule(_localctx, 70, RULE_through);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			Match(THROUGH);
			State = 432;
			proc();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(cobolParser.TIMES, 0); }
		public TimesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_times; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterTimes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitTimes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimesContext times() {
		TimesContext _localctx = new TimesContext(Context, State);
		EnterRule(_localctx, 72, RULE_times);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			Match(INT);
			State = 435;
			Match(TIMES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(cobolParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(cobolParser.LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplacingContext replacing() {
			return GetRuleContext<ReplacingContext>(0);
		}
		public CopyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterCopy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitCopy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyContext copy() {
		CopyContext _localctx = new CopyContext(Context, State);
		EnterRule(_localctx, 74, RULE_copy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			Match(COPY);
			State = 438;
			Match(LITERAL);
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REPLACING) {
				{
				State = 439;
				replacing();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplacingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACING() { return GetToken(cobolParser.REPLACING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplacementsContext[] replacements() {
			return GetRuleContexts<ReplacementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplacementsContext replacements(int i) {
			return GetRuleContext<ReplacementsContext>(i);
		}
		public ReplacingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replacing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterReplacing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitReplacing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplacing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplacingContext replacing() {
		ReplacingContext _localctx = new ReplacingContext(Context, State);
		EnterRule(_localctx, 76, RULE_replacing);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			Match(REPLACING);
			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 443;
				replacements();
				}
				}
				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COPY_LITERAL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplacementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COPY_LITERAL() { return GetTokens(cobolParser.COPY_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY_LITERAL(int i) {
			return GetToken(cobolParser.COPY_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(cobolParser.BY, 0); }
		public ReplacementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replacements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterReplacements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitReplacements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplacements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplacementsContext replacements() {
		ReplacementsContext _localctx = new ReplacementsContext(Context, State);
		EnterRule(_localctx, 78, RULE_replacements);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			Match(COPY_LITERAL);
			State = 449;
			Match(BY);
			State = 450;
			Match(COPY_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(cobolParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(cobolParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Loop_expressionContext[] loop_expression() {
			return GetRuleContexts<Loop_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_expressionContext loop_expression(int i) {
			return GetRuleContext<Loop_expressionContext>(i);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 80, RULE_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			Match(LOOP);
			State = 456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1129137135635398656L) != 0)) {
				{
				{
				State = 453;
				loop_expression();
				}
				}
				State = 458;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 459;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_expressionContext : ParserRuleContext {
		public Loop_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_expression; } }
	 
		public Loop_expressionContext() { }
		public virtual void CopyFrom(Loop_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Loop_while_expressionContext : Loop_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(cobolParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public Loop_while_expressionContext(Loop_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLoop_while_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLoop_while_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_while_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Loop_varying_expressionContext : Loop_expressionContext {
		public AtomicContext from;
		public AtomicContext to;
		public AtomicContext by;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(cobolParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(cobolParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(cobolParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(cobolParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext[] atomic() {
			return GetRuleContexts<AtomicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic(int i) {
			return GetRuleContext<AtomicContext>(i);
		}
		public Loop_varying_expressionContext(Loop_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLoop_varying_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLoop_varying_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_varying_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Loop_statement_expessionContext : Loop_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Loop_statement_expessionContext(Loop_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLoop_statement_expession(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLoop_statement_expession(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_statement_expession(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Loop_until_expressionContext : Loop_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(cobolParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public Loop_until_expressionContext(Loop_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLoop_until_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLoop_until_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_until_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loop_expressionContext loop_expression() {
		Loop_expressionContext _localctx = new Loop_expressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_loop_expression);
		int _la;
		try {
			State = 482;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARYING:
				_localctx = new Loop_varying_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 461;
				Match(VARYING);
				State = 463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 462;
					identifiers();
					}
				}

				State = 467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 465;
					Match(FROM);
					State = 466;
					((Loop_varying_expressionContext)_localctx).from = atomic();
					}
				}

				State = 471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TO) {
					{
					State = 469;
					Match(TO);
					State = 470;
					((Loop_varying_expressionContext)_localctx).to = atomic();
					}
				}

				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BY) {
					{
					State = 473;
					Match(BY);
					State = 474;
					((Loop_varying_expressionContext)_localctx).by = atomic();
					}
				}

				}
				break;
			case WHILE:
				_localctx = new Loop_while_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 477;
				Match(WHILE);
				State = 478;
				boolean(0);
				}
				break;
			case UNTIL:
				_localctx = new Loop_until_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 479;
				Match(UNTIL);
				State = 480;
				boolean(0);
				}
				break;
			case DISPLAY:
			case ADD:
			case ACCEPT:
			case MULTIPLY:
			case SUBTRACT:
			case DIVIDE:
			case IF:
			case EVALUATE:
			case STOP:
			case NEXT:
			case PERFORM:
			case COPY:
			case LOOP:
			case GO:
				_localctx = new Loop_statement_expessionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 481;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(cobolParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(cobolParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(cobolParser.IDENTIFIER, 0); }
		public GotoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterGoto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitGoto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoContext @goto() {
		GotoContext _localctx = new GotoContext(Context, State);
		EnterRule(_localctx, 84, RULE_goto);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			Match(GO);
			State = 485;
			Match(TO);
			State = 486;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return arithmetic_expression_sempred((Arithmetic_expressionContext)_localctx, predIndex);
		case 27: return string_expression_sempred((String_expressionContext)_localctx, predIndex);
		case 28: return boolean_sempred((BooleanContext)_localctx, predIndex);
		}
		return true;
	}
	private bool arithmetic_expression_sempred(Arithmetic_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool string_expression_sempred(String_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool boolean_sempred(BooleanContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,65,489,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		1,0,1,0,3,0,89,8,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,101,8,1,
		10,1,12,1,104,9,1,1,2,1,2,1,2,1,2,5,2,110,8,2,10,2,12,2,113,9,2,1,3,1,
		3,1,3,1,3,3,3,119,8,3,1,3,3,3,122,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,
		1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,3,8,142,8,8,1,8,1,8,4,8,146,8,
		8,11,8,12,8,147,1,9,1,9,4,9,152,8,9,11,9,12,9,153,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,3,10,165,8,10,1,11,1,11,1,11,3,11,170,8,11,1,
		11,4,11,173,8,11,11,11,12,11,174,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,195,8,13,1,14,
		1,14,4,14,199,8,14,11,14,12,14,200,1,14,3,14,204,8,14,1,15,1,15,4,15,208,
		8,15,11,15,12,15,209,1,15,1,15,1,15,1,15,4,15,216,8,15,11,15,12,15,217,
		1,15,1,15,1,15,3,15,223,8,15,1,16,1,16,1,16,1,16,4,16,229,8,16,11,16,12,
		16,230,1,16,1,16,1,16,1,16,1,16,3,16,238,8,16,1,17,1,17,1,17,1,17,4,17,
		244,8,17,11,17,12,17,245,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,1,17,3,17,260,8,17,1,18,1,18,4,18,264,8,18,11,18,12,18,265,1,
		18,1,18,1,18,1,18,4,18,272,8,18,11,18,12,18,273,1,18,1,18,1,18,3,18,279,
		8,18,1,19,1,19,4,19,283,8,19,11,19,12,19,284,1,20,1,20,1,20,1,20,1,21,
		1,21,1,21,3,21,294,8,21,1,22,1,22,1,22,1,23,1,23,1,23,5,23,302,8,23,10,
		23,12,23,305,9,23,1,23,1,23,1,23,3,23,310,8,23,1,24,1,24,1,24,1,25,1,25,
		1,25,1,25,4,25,319,8,25,11,25,12,25,320,1,25,1,25,4,25,325,8,25,11,25,
		12,25,326,3,25,329,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,5,26,339,
		8,26,10,26,12,26,342,9,26,1,27,1,27,1,27,1,27,1,27,1,27,5,27,350,8,27,
		10,27,12,27,353,9,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,
		364,8,28,1,28,1,28,1,28,5,28,369,8,28,10,28,12,28,372,9,28,1,29,1,29,1,
		29,3,29,377,8,29,1,30,1,30,1,30,1,30,5,30,383,8,30,10,30,12,30,386,9,30,
		1,30,5,30,389,8,30,10,30,12,30,392,9,30,1,30,1,30,1,31,1,31,1,31,1,31,
		5,31,400,8,31,10,31,12,31,403,9,31,1,31,4,31,406,8,31,11,31,12,31,407,
		1,31,1,31,1,31,4,31,413,8,31,11,31,12,31,414,3,31,417,8,31,1,32,1,32,1,
		33,1,33,1,33,1,34,1,34,1,34,3,34,427,8,34,1,34,3,34,430,8,34,1,35,1,35,
		1,35,1,36,1,36,1,36,1,37,1,37,1,37,3,37,441,8,37,1,38,1,38,4,38,445,8,
		38,11,38,12,38,446,1,39,1,39,1,39,1,39,1,40,1,40,5,40,455,8,40,10,40,12,
		40,458,9,40,1,40,1,40,1,41,1,41,3,41,464,8,41,1,41,1,41,3,41,468,8,41,
		1,41,1,41,3,41,472,8,41,1,41,1,41,3,41,476,8,41,1,41,1,41,1,41,1,41,1,
		41,3,41,483,8,41,1,42,1,42,1,42,1,42,1,42,0,3,52,54,56,43,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
		60,62,64,66,68,70,72,74,76,78,80,82,84,0,0,518,0,86,1,0,0,0,2,93,1,0,0,
		0,4,105,1,0,0,0,6,114,1,0,0,0,8,125,1,0,0,0,10,129,1,0,0,0,12,131,1,0,
		0,0,14,135,1,0,0,0,16,138,1,0,0,0,18,149,1,0,0,0,20,164,1,0,0,0,22,169,
		1,0,0,0,24,178,1,0,0,0,26,194,1,0,0,0,28,196,1,0,0,0,30,222,1,0,0,0,32,
		237,1,0,0,0,34,259,1,0,0,0,36,278,1,0,0,0,38,280,1,0,0,0,40,286,1,0,0,
		0,42,293,1,0,0,0,44,295,1,0,0,0,46,298,1,0,0,0,48,311,1,0,0,0,50,314,1,
		0,0,0,52,332,1,0,0,0,54,343,1,0,0,0,56,363,1,0,0,0,58,376,1,0,0,0,60,378,
		1,0,0,0,62,416,1,0,0,0,64,418,1,0,0,0,66,420,1,0,0,0,68,423,1,0,0,0,70,
		431,1,0,0,0,72,434,1,0,0,0,74,437,1,0,0,0,76,442,1,0,0,0,78,448,1,0,0,
		0,80,452,1,0,0,0,82,482,1,0,0,0,84,484,1,0,0,0,86,88,3,2,1,0,87,89,3,4,
		2,0,88,87,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,91,3,16,8,0,91,92,5,0,
		0,1,92,1,1,0,0,0,93,94,5,8,0,0,94,95,5,9,0,0,95,102,5,63,0,0,96,97,5,60,
		0,0,97,98,5,63,0,0,98,99,5,64,0,0,99,101,5,63,0,0,100,96,1,0,0,0,101,104,
		1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,3,1,0,0,0,104,102,1,0,0,0,
		105,106,5,27,0,0,106,107,5,9,0,0,107,111,5,63,0,0,108,110,3,6,3,0,109,
		108,1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,5,1,0,
		0,0,113,111,1,0,0,0,114,115,3,10,5,0,115,118,5,60,0,0,116,119,3,12,6,0,
		117,119,3,14,7,0,118,116,1,0,0,0,118,117,1,0,0,0,118,119,1,0,0,0,119,121,
		1,0,0,0,120,122,3,8,4,0,121,120,1,0,0,0,121,122,1,0,0,0,122,123,1,0,0,
		0,123,124,5,63,0,0,124,7,1,0,0,0,125,126,5,10,0,0,126,127,5,61,0,0,127,
		128,5,11,0,0,128,9,1,0,0,0,129,130,5,61,0,0,130,11,1,0,0,0,131,132,5,12,
		0,0,132,133,5,13,0,0,133,134,5,4,0,0,134,13,1,0,0,0,135,136,5,21,0,0,136,
		137,3,46,23,0,137,15,1,0,0,0,138,139,5,14,0,0,139,141,5,9,0,0,140,142,
		3,18,9,0,141,140,1,0,0,0,141,142,1,0,0,0,142,143,1,0,0,0,143,145,5,63,
		0,0,144,146,3,22,11,0,145,144,1,0,0,0,146,147,1,0,0,0,147,145,1,0,0,0,
		147,148,1,0,0,0,148,17,1,0,0,0,149,151,5,15,0,0,150,152,3,20,10,0,151,
		150,1,0,0,0,152,153,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,19,1,0,
		0,0,155,156,5,16,0,0,156,157,5,18,0,0,157,165,3,46,23,0,158,159,5,16,0,
		0,159,160,5,19,0,0,160,165,3,42,21,0,161,162,5,16,0,0,162,163,5,20,0,0,
		163,165,3,42,21,0,164,155,1,0,0,0,164,158,1,0,0,0,164,161,1,0,0,0,165,
		21,1,0,0,0,166,167,3,24,12,0,167,168,5,63,0,0,168,170,1,0,0,0,169,166,
		1,0,0,0,169,170,1,0,0,0,170,172,1,0,0,0,171,173,3,26,13,0,172,171,1,0,
		0,0,173,174,1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,176,1,0,0,0,176,
		177,5,63,0,0,177,23,1,0,0,0,178,179,5,60,0,0,179,25,1,0,0,0,180,195,3,
		28,14,0,181,195,3,30,15,0,182,195,3,38,19,0,183,195,3,32,16,0,184,195,
		3,36,18,0,185,195,3,34,17,0,186,195,3,50,25,0,187,195,3,60,30,0,188,195,
		3,64,32,0,189,195,3,66,33,0,190,195,3,68,34,0,191,195,3,74,37,0,192,195,
		3,80,40,0,193,195,3,84,42,0,194,180,1,0,0,0,194,181,1,0,0,0,194,182,1,
		0,0,0,194,183,1,0,0,0,194,184,1,0,0,0,194,185,1,0,0,0,194,186,1,0,0,0,
		194,187,1,0,0,0,194,188,1,0,0,0,194,189,1,0,0,0,194,190,1,0,0,0,194,191,
		1,0,0,0,194,192,1,0,0,0,194,193,1,0,0,0,195,27,1,0,0,0,196,198,5,22,0,
		0,197,199,3,42,21,0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,
		201,1,0,0,0,201,203,1,0,0,0,202,204,3,40,20,0,203,202,1,0,0,0,203,204,
		1,0,0,0,204,29,1,0,0,0,205,207,5,28,0,0,206,208,5,61,0,0,207,206,1,0,0,
		0,208,209,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,211,1,0,0,0,211,
		212,5,29,0,0,212,223,3,46,23,0,213,215,5,28,0,0,214,216,5,61,0,0,215,214,
		1,0,0,0,216,217,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,219,1,0,0,
		0,219,220,5,29,0,0,220,221,5,61,0,0,221,223,3,44,22,0,222,205,1,0,0,0,
		222,213,1,0,0,0,223,31,1,0,0,0,224,225,5,34,0,0,225,226,5,61,0,0,226,228,
		5,16,0,0,227,229,3,46,23,0,228,227,1,0,0,0,229,230,1,0,0,0,230,228,1,0,
		0,0,230,231,1,0,0,0,231,238,1,0,0,0,232,233,5,34,0,0,233,234,5,61,0,0,
		234,235,5,16,0,0,235,236,5,61,0,0,236,238,3,44,22,0,237,224,1,0,0,0,237,
		232,1,0,0,0,238,33,1,0,0,0,239,240,5,36,0,0,240,241,5,61,0,0,241,243,5,
		30,0,0,242,244,3,46,23,0,243,242,1,0,0,0,244,245,1,0,0,0,245,243,1,0,0,
		0,245,246,1,0,0,0,246,260,1,0,0,0,247,248,5,36,0,0,248,249,5,61,0,0,249,
		250,5,30,0,0,250,251,5,61,0,0,251,260,3,44,22,0,252,253,5,36,0,0,253,254,
		5,61,0,0,254,255,5,30,0,0,255,256,5,61,0,0,256,257,3,44,22,0,257,258,3,
		48,24,0,258,260,1,0,0,0,259,239,1,0,0,0,259,247,1,0,0,0,259,252,1,0,0,
		0,260,35,1,0,0,0,261,263,5,35,0,0,262,264,5,61,0,0,263,262,1,0,0,0,264,
		265,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,268,5,
		17,0,0,268,279,3,46,23,0,269,271,5,35,0,0,270,272,5,61,0,0,271,270,1,0,
		0,0,272,273,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,
		276,5,17,0,0,276,277,5,61,0,0,277,279,3,44,22,0,278,261,1,0,0,0,278,269,
		1,0,0,0,279,37,1,0,0,0,280,282,5,33,0,0,281,283,3,46,23,0,282,281,1,0,
		0,0,283,284,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,39,1,0,0,0,286,
		287,5,24,0,0,287,288,5,25,0,0,288,289,5,26,0,0,289,41,1,0,0,0,290,294,
		3,46,23,0,291,294,5,61,0,0,292,294,5,64,0,0,293,290,1,0,0,0,293,291,1,
		0,0,0,293,292,1,0,0,0,294,43,1,0,0,0,295,296,5,31,0,0,296,297,3,46,23,
		0,297,45,1,0,0,0,298,303,5,60,0,0,299,300,5,23,0,0,300,302,5,60,0,0,301,
		299,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,309,1,
		0,0,0,305,303,1,0,0,0,306,307,5,1,0,0,307,308,5,61,0,0,308,310,5,2,0,0,
		309,306,1,0,0,0,309,310,1,0,0,0,310,47,1,0,0,0,311,312,5,32,0,0,312,313,
		3,46,23,0,313,49,1,0,0,0,314,315,5,37,0,0,315,316,3,56,28,0,316,318,5,
		39,0,0,317,319,3,26,13,0,318,317,1,0,0,0,319,320,1,0,0,0,320,318,1,0,0,
		0,320,321,1,0,0,0,321,328,1,0,0,0,322,324,5,38,0,0,323,325,3,26,13,0,324,
		323,1,0,0,0,325,326,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,329,1,
		0,0,0,328,322,1,0,0,0,328,329,1,0,0,0,329,330,1,0,0,0,330,331,5,40,0,0,
		331,51,1,0,0,0,332,333,6,26,-1,0,333,334,3,42,21,0,334,340,1,0,0,0,335,
		336,10,1,0,0,336,337,5,5,0,0,337,339,3,52,26,2,338,335,1,0,0,0,339,342,
		1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,53,1,0,0,0,342,340,1,0,0,0,
		343,344,6,27,-1,0,344,345,3,42,21,0,345,351,1,0,0,0,346,347,10,1,0,0,347,
		348,5,3,0,0,348,350,3,54,27,2,349,346,1,0,0,0,350,353,1,0,0,0,351,349,
		1,0,0,0,351,352,1,0,0,0,352,55,1,0,0,0,353,351,1,0,0,0,354,355,6,28,-1,
		0,355,364,5,41,0,0,356,364,5,42,0,0,357,358,3,52,26,0,358,359,5,6,0,0,
		359,360,3,52,26,0,360,364,1,0,0,0,361,362,5,43,0,0,362,364,3,56,28,2,363,
		354,1,0,0,0,363,356,1,0,0,0,363,357,1,0,0,0,363,361,1,0,0,0,364,370,1,
		0,0,0,365,366,10,1,0,0,366,367,5,7,0,0,367,369,3,56,28,2,368,365,1,0,0,
		0,369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,57,1,0,0,0,372,370,
		1,0,0,0,373,377,3,56,28,0,374,377,3,52,26,0,375,377,3,54,27,0,376,373,
		1,0,0,0,376,374,1,0,0,0,376,375,1,0,0,0,377,59,1,0,0,0,378,379,5,47,0,
		0,379,384,3,58,29,0,380,381,5,45,0,0,381,383,3,58,29,0,382,380,1,0,0,0,
		383,386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,390,1,0,0,0,386,384,
		1,0,0,0,387,389,3,62,31,0,388,387,1,0,0,0,389,392,1,0,0,0,390,388,1,0,
		0,0,390,391,1,0,0,0,391,393,1,0,0,0,392,390,1,0,0,0,393,394,5,40,0,0,394,
		61,1,0,0,0,395,396,5,44,0,0,396,401,3,42,21,0,397,398,5,45,0,0,398,400,
		3,42,21,0,399,397,1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,
		0,0,402,405,1,0,0,0,403,401,1,0,0,0,404,406,3,26,13,0,405,404,1,0,0,0,
		406,407,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,417,1,0,0,0,409,410,
		5,44,0,0,410,412,5,46,0,0,411,413,3,26,13,0,412,411,1,0,0,0,413,414,1,
		0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,417,1,0,0,0,416,395,1,0,0,0,
		416,409,1,0,0,0,417,63,1,0,0,0,418,419,5,48,0,0,419,65,1,0,0,0,420,421,
		5,49,0,0,421,422,5,50,0,0,422,67,1,0,0,0,423,424,5,51,0,0,424,426,3,24,
		12,0,425,427,3,70,35,0,426,425,1,0,0,0,426,427,1,0,0,0,427,429,1,0,0,0,
		428,430,3,72,36,0,429,428,1,0,0,0,429,430,1,0,0,0,430,69,1,0,0,0,431,432,
		5,52,0,0,432,433,3,24,12,0,433,71,1,0,0,0,434,435,5,61,0,0,435,436,5,11,
		0,0,436,73,1,0,0,0,437,438,5,53,0,0,438,440,5,64,0,0,439,441,3,76,38,0,
		440,439,1,0,0,0,440,441,1,0,0,0,441,75,1,0,0,0,442,444,5,54,0,0,443,445,
		3,78,39,0,444,443,1,0,0,0,445,446,1,0,0,0,446,444,1,0,0,0,446,447,1,0,
		0,0,447,77,1,0,0,0,448,449,5,65,0,0,449,450,5,16,0,0,450,451,5,65,0,0,
		451,79,1,0,0,0,452,456,5,55,0,0,453,455,3,82,41,0,454,453,1,0,0,0,455,
		458,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,459,1,0,0,0,458,456,1,
		0,0,0,459,460,5,40,0,0,460,81,1,0,0,0,461,463,5,56,0,0,462,464,3,46,23,
		0,463,462,1,0,0,0,463,464,1,0,0,0,464,467,1,0,0,0,465,466,5,17,0,0,466,
		468,3,42,21,0,467,465,1,0,0,0,467,468,1,0,0,0,468,471,1,0,0,0,469,470,
		5,29,0,0,470,472,3,42,21,0,471,469,1,0,0,0,471,472,1,0,0,0,472,475,1,0,
		0,0,473,474,5,16,0,0,474,476,3,42,21,0,475,473,1,0,0,0,475,476,1,0,0,0,
		476,483,1,0,0,0,477,478,5,57,0,0,478,483,3,56,28,0,479,480,5,58,0,0,480,
		483,3,56,28,0,481,483,3,26,13,0,482,461,1,0,0,0,482,477,1,0,0,0,482,479,
		1,0,0,0,482,481,1,0,0,0,483,83,1,0,0,0,484,485,5,59,0,0,485,486,5,29,0,
		0,486,487,5,60,0,0,487,85,1,0,0,0,52,88,102,111,118,121,141,147,153,164,
		169,174,194,200,203,209,217,222,230,237,245,259,265,273,278,284,293,303,
		309,320,326,328,340,351,363,370,376,384,390,401,407,414,416,426,429,440,
		446,456,463,467,471,475,482
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
