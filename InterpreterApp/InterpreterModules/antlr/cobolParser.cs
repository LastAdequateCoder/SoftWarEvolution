//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from cobol.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class cobolParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, REPRESENTATION=3, IDENTIFICATION=4, DIVISION=5, OCCURS=6, 
		TIMES=7, PICTURE=8, IS=9, PROCEDURE=10, USING=11, BY=12, REFERENCE=13, 
		CONTENT=14, VALUE=15, LIKE=16, DISPLAY=17, OF=18, WITH=19, NO=20, ADVANCING=21, 
		IDENTIFIER=22, INT=23, SPACE=24, DOT=25, LITERAL=26;
	public const int
		RULE_program = 0, RULE_identification_division = 1, RULE_data_division = 2, 
		RULE_picture = 3, RULE_like = 4, RULE_procedure_division = 5, RULE_using = 6, 
		RULE_use = 7, RULE_sentence = 8, RULE_statement = 9, RULE_display = 10, 
		RULE_withnoadvancing = 11, RULE_atomic = 12, RULE_identifiers = 13;
	public static readonly string[] ruleNames = {
		"program", "identification_division", "data_division", "picture", "like", 
		"procedure_division", "using", "use", "sentence", "statement", "display", 
		"withnoadvancing", "atomic", "identifiers"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "REPRESENTATION", "IDENTIFICATION", "DIVISION", "OCCURS", 
		"TIMES", "PICTURE", "IS", "PROCEDURE", "USING", "BY", "REFERENCE", "CONTENT", 
		"VALUE", "LIKE", "DISPLAY", "OF", "WITH", "NO", "ADVANCING", "IDENTIFIER", 
		"INT", "SPACE", "DOT", "LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "cobol.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static cobolParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public cobolParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public cobolParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identification_divisionContext identification_division() {
			return GetRuleContext<Identification_divisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(cobolParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_divisionContext procedure_division() {
			return GetRuleContext<Procedure_divisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_divisionContext data_division() {
			return GetRuleContext<Data_divisionContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			identification_division();
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT) {
				{
				State = 29;
				data_division();
				}
			}

			{
			State = 32;
			procedure_division();
			}
			State = 33;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identification_divisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICATION() { return GetToken(cobolParser.IDENTIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(cobolParser.DIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(cobolParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(cobolParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(cobolParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(cobolParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LITERAL() { return GetTokens(cobolParser.LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL(int i) {
			return GetToken(cobolParser.LITERAL, i);
		}
		public Identification_divisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identification_division; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterIdentification_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitIdentification_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentification_division(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identification_divisionContext identification_division() {
		Identification_divisionContext _localctx = new Identification_divisionContext(Context, State);
		EnterRule(_localctx, 2, RULE_identification_division);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			Match(IDENTIFICATION);
			State = 36;
			Match(DIVISION);
			State = 37;
			Match(DOT);
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 38;
				Match(IDENTIFIER);
				State = 39;
				Match(DOT);
				State = 40;
				Match(LITERAL);
				State = 41;
				Match(DOT);
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_divisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(cobolParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(cobolParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(cobolParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(cobolParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PictureContext picture() {
			return GetRuleContext<PictureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeContext like() {
			return GetRuleContext<LikeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCCURS() { return GetToken(cobolParser.OCCURS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(cobolParser.TIMES, 0); }
		public Data_divisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_division; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterData_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitData_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_division(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_divisionContext data_division() {
		Data_divisionContext _localctx = new Data_divisionContext(Context, State);
		EnterRule(_localctx, 4, RULE_data_division);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			Match(INT);
			State = 48;
			Match(IDENTIFIER);
			State = 51;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PICTURE:
				{
				State = 49;
				picture();
				}
				break;
			case LIKE:
				{
				State = 50;
				like();
				}
				break;
			case OCCURS:
			case DOT:
				break;
			default:
				break;
			}
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OCCURS) {
				{
				State = 53;
				Match(OCCURS);
				State = 54;
				Match(INT);
				State = 55;
				Match(TIMES);
				}
			}

			State = 58;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PictureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PICTURE() { return GetToken(cobolParser.PICTURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(cobolParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPRESENTATION() { return GetToken(cobolParser.REPRESENTATION, 0); }
		public PictureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_picture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterPicture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitPicture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPicture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PictureContext picture() {
		PictureContext _localctx = new PictureContext(Context, State);
		EnterRule(_localctx, 6, RULE_picture);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(PICTURE);
			State = 61;
			Match(IS);
			State = 62;
			Match(REPRESENTATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(cobolParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public LikeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_like; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLike(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLike(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLike(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikeContext like() {
		LikeContext _localctx = new LikeContext(Context, State);
		EnterRule(_localctx, 8, RULE_like);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(LIKE);
			State = 65;
			identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_divisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(cobolParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(cobolParser.DIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(cobolParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingContext @using() {
			return GetRuleContext<UsingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenceContext[] sentence() {
			return GetRuleContexts<SentenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenceContext sentence(int i) {
			return GetRuleContext<SentenceContext>(i);
		}
		public Procedure_divisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_division; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterProcedure_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitProcedure_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_division(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_divisionContext procedure_division() {
		Procedure_divisionContext _localctx = new Procedure_divisionContext(Context, State);
		EnterRule(_localctx, 10, RULE_procedure_division);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(PROCEDURE);
			State = 68;
			Match(DIVISION);
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 69;
				@using();
				}
			}

			State = 72;
			Match(DOT);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 73;
				sentence();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DISPLAY || _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(cobolParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UseContext[] use() {
			return GetRuleContexts<UseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseContext use(int i) {
			return GetRuleContext<UseContext>(i);
		}
		public UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterUsing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitUsing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingContext @using() {
		UsingContext _localctx = new UsingContext(Context, State);
		EnterRule(_localctx, 12, RULE_using);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(USING);
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 79;
				use();
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==BY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(cobolParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(cobolParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTENT() { return GetToken(cobolParser.CONTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic() {
			return GetRuleContext<AtomicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(cobolParser.VALUE, 0); }
		public UseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseContext use() {
		UseContext _localctx = new UseContext(Context, State);
		EnterRule(_localctx, 14, RULE_use);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84;
				Match(BY);
				State = 85;
				Match(REFERENCE);
				State = 86;
				identifiers();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87;
				Match(BY);
				State = 88;
				Match(CONTENT);
				State = 89;
				atomic();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 90;
				Match(BY);
				State = 91;
				Match(VALUE);
				State = 92;
				atomic();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(cobolParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(cobolParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(cobolParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterSentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitSentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenceContext sentence() {
		SentenceContext _localctx = new SentenceContext(Context, State);
		EnterRule(_localctx, 16, RULE_sentence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 95;
				Match(IDENTIFIER);
				State = 96;
				Match(DOT);
				}
			}

			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 99;
				statement();
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DISPLAY );
			State = 104;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DisplayContext display() {
			return GetRuleContext<DisplayContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			display();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisplayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISPLAY() { return GetToken(cobolParser.DISPLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext[] atomic() {
			return GetRuleContexts<AtomicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic(int i) {
			return GetRuleContext<AtomicContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithnoadvancingContext withnoadvancing() {
			return GetRuleContext<WithnoadvancingContext>(0);
		}
		public DisplayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_display; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterDisplay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitDisplay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisplayContext display() {
		DisplayContext _localctx = new DisplayContext(Context, State);
		EnterRule(_localctx, 20, RULE_display);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(DISPLAY);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 109;
				atomic();
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 79691776L) != 0) );
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 114;
				withnoadvancing();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithnoadvancingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(cobolParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(cobolParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADVANCING() { return GetToken(cobolParser.ADVANCING, 0); }
		public WithnoadvancingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withnoadvancing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterWithnoadvancing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitWithnoadvancing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithnoadvancing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithnoadvancingContext withnoadvancing() {
		WithnoadvancingContext _localctx = new WithnoadvancingContext(Context, State);
		EnterRule(_localctx, 22, RULE_withnoadvancing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(WITH);
			State = 118;
			Match(NO);
			State = 119;
			Match(ADVANCING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(cobolParser.LITERAL, 0); }
		public AtomicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicContext atomic() {
		AtomicContext _localctx = new AtomicContext(Context, State);
		EnterRule(_localctx, 24, RULE_atomic);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				identifiers();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122;
				Match(INT);
				}
				break;
			case LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 123;
				Match(LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(cobolParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(cobolParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OF() { return GetTokens(cobolParser.OF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF(int i) {
			return GetToken(cobolParser.OF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		public IdentifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterIdentifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitIdentifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiersContext identifiers() {
		IdentifiersContext _localctx = new IdentifiersContext(Context, State);
		EnterRule(_localctx, 26, RULE_identifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(IDENTIFIER);
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OF) {
				{
				{
				State = 127;
				Match(OF);
				State = 128;
				Match(IDENTIFIER);
				}
				}
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 134;
				Match(T__0);
				State = 135;
				Match(INT);
				State = 136;
				Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,26,140,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,0,3,
		0,31,8,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,43,8,1,10,1,12,1,
		46,9,1,1,2,1,2,1,2,1,2,3,2,52,8,2,1,2,1,2,1,2,3,2,57,8,2,1,2,1,2,1,3,1,
		3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,3,5,71,8,5,1,5,1,5,4,5,75,8,5,11,5,12,
		5,76,1,6,1,6,4,6,81,8,6,11,6,12,6,82,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,3,7,94,8,7,1,8,1,8,3,8,98,8,8,1,8,4,8,101,8,8,11,8,12,8,102,1,8,1,8,
		1,9,1,9,1,10,1,10,4,10,111,8,10,11,10,12,10,112,1,10,3,10,116,8,10,1,11,
		1,11,1,11,1,11,1,12,1,12,1,12,3,12,125,8,12,1,13,1,13,1,13,5,13,130,8,
		13,10,13,12,13,133,9,13,1,13,1,13,1,13,3,13,138,8,13,1,13,0,0,14,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,0,0,143,0,28,1,0,0,0,2,35,1,0,0,0,4,47,
		1,0,0,0,6,60,1,0,0,0,8,64,1,0,0,0,10,67,1,0,0,0,12,78,1,0,0,0,14,93,1,
		0,0,0,16,97,1,0,0,0,18,106,1,0,0,0,20,108,1,0,0,0,22,117,1,0,0,0,24,124,
		1,0,0,0,26,126,1,0,0,0,28,30,3,2,1,0,29,31,3,4,2,0,30,29,1,0,0,0,30,31,
		1,0,0,0,31,32,1,0,0,0,32,33,3,10,5,0,33,34,5,0,0,1,34,1,1,0,0,0,35,36,
		5,4,0,0,36,37,5,5,0,0,37,44,5,25,0,0,38,39,5,22,0,0,39,40,5,25,0,0,40,
		41,5,26,0,0,41,43,5,25,0,0,42,38,1,0,0,0,43,46,1,0,0,0,44,42,1,0,0,0,44,
		45,1,0,0,0,45,3,1,0,0,0,46,44,1,0,0,0,47,48,5,23,0,0,48,51,5,22,0,0,49,
		52,3,6,3,0,50,52,3,8,4,0,51,49,1,0,0,0,51,50,1,0,0,0,51,52,1,0,0,0,52,
		56,1,0,0,0,53,54,5,6,0,0,54,55,5,23,0,0,55,57,5,7,0,0,56,53,1,0,0,0,56,
		57,1,0,0,0,57,58,1,0,0,0,58,59,5,25,0,0,59,5,1,0,0,0,60,61,5,8,0,0,61,
		62,5,9,0,0,62,63,5,3,0,0,63,7,1,0,0,0,64,65,5,16,0,0,65,66,3,26,13,0,66,
		9,1,0,0,0,67,68,5,10,0,0,68,70,5,5,0,0,69,71,3,12,6,0,70,69,1,0,0,0,70,
		71,1,0,0,0,71,72,1,0,0,0,72,74,5,25,0,0,73,75,3,16,8,0,74,73,1,0,0,0,75,
		76,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,11,1,0,0,0,78,80,5,11,0,0,79,
		81,3,14,7,0,80,79,1,0,0,0,81,82,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,
		13,1,0,0,0,84,85,5,12,0,0,85,86,5,13,0,0,86,94,3,26,13,0,87,88,5,12,0,
		0,88,89,5,14,0,0,89,94,3,24,12,0,90,91,5,12,0,0,91,92,5,15,0,0,92,94,3,
		24,12,0,93,84,1,0,0,0,93,87,1,0,0,0,93,90,1,0,0,0,94,15,1,0,0,0,95,96,
		5,22,0,0,96,98,5,25,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,100,1,0,0,0,99,
		101,3,18,9,0,100,99,1,0,0,0,101,102,1,0,0,0,102,100,1,0,0,0,102,103,1,
		0,0,0,103,104,1,0,0,0,104,105,5,25,0,0,105,17,1,0,0,0,106,107,3,20,10,
		0,107,19,1,0,0,0,108,110,5,17,0,0,109,111,3,24,12,0,110,109,1,0,0,0,111,
		112,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,115,1,0,0,0,114,116,3,
		22,11,0,115,114,1,0,0,0,115,116,1,0,0,0,116,21,1,0,0,0,117,118,5,19,0,
		0,118,119,5,20,0,0,119,120,5,21,0,0,120,23,1,0,0,0,121,125,3,26,13,0,122,
		125,5,23,0,0,123,125,5,26,0,0,124,121,1,0,0,0,124,122,1,0,0,0,124,123,
		1,0,0,0,125,25,1,0,0,0,126,131,5,22,0,0,127,128,5,18,0,0,128,130,5,22,
		0,0,129,127,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,
		137,1,0,0,0,133,131,1,0,0,0,134,135,5,1,0,0,135,136,5,23,0,0,136,138,5,
		2,0,0,137,134,1,0,0,0,137,138,1,0,0,0,138,27,1,0,0,0,15,30,44,51,56,70,
		76,82,93,97,102,112,115,124,131,137
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
