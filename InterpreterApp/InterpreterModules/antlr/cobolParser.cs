//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from cobol.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class cobolParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, REPRESENTATION=4, ARITHMETIC_OPERATOR=5, COMPARISON_OPERATOR=6, 
		BOOLEAN_OPERATOR=7, IDENTIFICATION=8, DIVISION=9, OCCURS=10, TIMES=11, 
		PICTURE=12, IS=13, PROCEDURE=14, USING=15, BY=16, FROM=17, REFERENCE=18, 
		CONTENT=19, VALUE=20, LIKE=21, DISPLAY=22, OF=23, WITH=24, NO=25, ADVANCING=26, 
		DATA=27, ADD=28, TO=29, INTO=30, GIVING=31, REMAINDER=32, ACCEPT=33, MULTIPLY=34, 
		SUBTRACT=35, DIVIDE=36, IF=37, ELSE=38, THEN=39, END=40, TRUE=41, FALSE=42, 
		NOT=43, WHEN=44, ALSO=45, OTHER=46, EVALUATE=47, STOP=48, NEXT=49, SENTENCE=50, 
		IDENTIFIER=51, INT=52, SPACE=53, DOT=54, LITERAL=55;
	public const int
		RULE_program = 0, RULE_identification_division = 1, RULE_data_division = 2, 
		RULE_variables = 3, RULE_level = 4, RULE_picture = 5, RULE_like = 6, RULE_procedure_division = 7, 
		RULE_using = 8, RULE_use = 9, RULE_sentence = 10, RULE_statement = 11, 
		RULE_display = 12, RULE_add = 13, RULE_multiply = 14, RULE_divide = 15, 
		RULE_subtract = 16, RULE_accept = 17, RULE_withnoadvancing = 18, RULE_atomic = 19, 
		RULE_giving = 20, RULE_identifiers = 21, RULE_remainder = 22, RULE_if = 23, 
		RULE_arithmetic_expression = 24, RULE_string_expression = 25, RULE_boolean = 26, 
		RULE_expressions = 27, RULE_evaluate = 28, RULE_when_block = 29, RULE_stop = 30, 
		RULE_next_sentence = 31;
	public static readonly string[] ruleNames = {
		"program", "identification_division", "data_division", "variables", "level", 
		"picture", "like", "procedure_division", "using", "use", "sentence", "statement", 
		"display", "add", "multiply", "divide", "subtract", "accept", "withnoadvancing", 
		"atomic", "giving", "identifiers", "remainder", "if", "arithmetic_expression", 
		"string_expression", "boolean", "expressions", "evaluate", "when_block", 
		"stop", "next_sentence"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "REPRESENTATION", "ARITHMETIC_OPERATOR", "COMPARISON_OPERATOR", 
		"BOOLEAN_OPERATOR", "IDENTIFICATION", "DIVISION", "OCCURS", "TIMES", "PICTURE", 
		"IS", "PROCEDURE", "USING", "BY", "FROM", "REFERENCE", "CONTENT", "VALUE", 
		"LIKE", "DISPLAY", "OF", "WITH", "NO", "ADVANCING", "DATA", "ADD", "TO", 
		"INTO", "GIVING", "REMAINDER", "ACCEPT", "MULTIPLY", "SUBTRACT", "DIVIDE", 
		"IF", "ELSE", "THEN", "END", "TRUE", "FALSE", "NOT", "WHEN", "ALSO", "OTHER", 
		"EVALUATE", "STOP", "NEXT", "SENTENCE", "IDENTIFIER", "INT", "SPACE", 
		"DOT", "LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "cobol.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static cobolParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public cobolParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public cobolParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identification_divisionContext identification_division() {
			return GetRuleContext<Identification_divisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(cobolParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_divisionContext procedure_division() {
			return GetRuleContext<Procedure_divisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_divisionContext data_division() {
			return GetRuleContext<Data_divisionContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			identification_division();
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATA) {
				{
				State = 65;
				data_division();
				}
			}

			{
			State = 68;
			procedure_division();
			}
			State = 69;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identification_divisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICATION() { return GetToken(cobolParser.IDENTIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(cobolParser.DIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(cobolParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(cobolParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(cobolParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(cobolParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LITERAL() { return GetTokens(cobolParser.LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL(int i) {
			return GetToken(cobolParser.LITERAL, i);
		}
		public Identification_divisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identification_division; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterIdentification_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitIdentification_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentification_division(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identification_divisionContext identification_division() {
		Identification_divisionContext _localctx = new Identification_divisionContext(Context, State);
		EnterRule(_localctx, 2, RULE_identification_division);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(IDENTIFICATION);
			State = 72;
			Match(DIVISION);
			State = 73;
			Match(DOT);
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 74;
				Match(IDENTIFIER);
				State = 75;
				Match(DOT);
				State = 76;
				Match(LITERAL);
				State = 77;
				Match(DOT);
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_divisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(cobolParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(cobolParser.DIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(cobolParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablesContext[] variables() {
			return GetRuleContexts<VariablesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablesContext variables(int i) {
			return GetRuleContext<VariablesContext>(i);
		}
		public Data_divisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_division; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterData_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitData_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_division(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_divisionContext data_division() {
		Data_divisionContext _localctx = new Data_divisionContext(Context, State);
		EnterRule(_localctx, 4, RULE_data_division);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(DATA);
			State = 84;
			Match(DIVISION);
			State = 85;
			Match(DOT);
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INT) {
				{
				{
				State = 86;
				variables();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LevelContext level() {
			return GetRuleContext<LevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(cobolParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(cobolParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PictureContext picture() {
			return GetRuleContext<PictureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeContext like() {
			return GetRuleContext<LikeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCCURS() { return GetToken(cobolParser.OCCURS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(cobolParser.TIMES, 0); }
		public VariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariablesContext variables() {
		VariablesContext _localctx = new VariablesContext(Context, State);
		EnterRule(_localctx, 6, RULE_variables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 92;
			level();
			State = 93;
			Match(IDENTIFIER);
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PICTURE:
				{
				State = 94;
				picture();
				}
				break;
			case LIKE:
				{
				State = 95;
				like();
				}
				break;
			case OCCURS:
			case DOT:
				break;
			default:
				break;
			}
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OCCURS) {
				{
				State = 98;
				Match(OCCURS);
				State = 99;
				Match(INT);
				State = 100;
				Match(TIMES);
				}
			}

			State = 103;
			Match(DOT);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		public LevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_level; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelContext level() {
		LevelContext _localctx = new LevelContext(Context, State);
		EnterRule(_localctx, 8, RULE_level);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PictureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PICTURE() { return GetToken(cobolParser.PICTURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(cobolParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPRESENTATION() { return GetToken(cobolParser.REPRESENTATION, 0); }
		public PictureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_picture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterPicture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitPicture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPicture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PictureContext picture() {
		PictureContext _localctx = new PictureContext(Context, State);
		EnterRule(_localctx, 10, RULE_picture);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(PICTURE);
			State = 108;
			Match(IS);
			State = 109;
			Match(REPRESENTATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(cobolParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public LikeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_like; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterLike(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitLike(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLike(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikeContext like() {
		LikeContext _localctx = new LikeContext(Context, State);
		EnterRule(_localctx, 12, RULE_like);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(LIKE);
			State = 112;
			identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_divisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(cobolParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(cobolParser.DIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(cobolParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingContext @using() {
			return GetRuleContext<UsingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenceContext[] sentence() {
			return GetRuleContexts<SentenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenceContext sentence(int i) {
			return GetRuleContext<SentenceContext>(i);
		}
		public Procedure_divisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_division; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterProcedure_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitProcedure_division(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_division(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_divisionContext procedure_division() {
		Procedure_divisionContext _localctx = new Procedure_divisionContext(Context, State);
		EnterRule(_localctx, 14, RULE_procedure_division);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(PROCEDURE);
			State = 115;
			Match(DIVISION);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 116;
				@using();
				}
			}

			State = 119;
			Match(DOT);
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 120;
				sentence();
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 3237228792774656L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(cobolParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UseContext[] use() {
			return GetRuleContexts<UseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseContext use(int i) {
			return GetRuleContext<UseContext>(i);
		}
		public UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterUsing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitUsing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingContext @using() {
		UsingContext _localctx = new UsingContext(Context, State);
		EnterRule(_localctx, 16, RULE_using);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(USING);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 126;
				use();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==BY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(cobolParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(cobolParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTENT() { return GetToken(cobolParser.CONTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic() {
			return GetRuleContext<AtomicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(cobolParser.VALUE, 0); }
		public UseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseContext use() {
		UseContext _localctx = new UseContext(Context, State);
		EnterRule(_localctx, 18, RULE_use);
		try {
			State = 140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				Match(BY);
				State = 132;
				Match(REFERENCE);
				State = 133;
				identifiers();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 134;
				Match(BY);
				State = 135;
				Match(CONTENT);
				State = 136;
				atomic();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 137;
				Match(BY);
				State = 138;
				Match(VALUE);
				State = 139;
				atomic();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(cobolParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(cobolParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(cobolParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterSentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitSentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenceContext sentence() {
		SentenceContext _localctx = new SentenceContext(Context, State);
		EnterRule(_localctx, 20, RULE_sentence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 142;
				Match(IDENTIFIER);
				State = 143;
				Match(DOT);
				}
			}

			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 146;
				statement();
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 985428979089408L) != 0) );
			State = 151;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DisplayContext display() {
			return GetRuleContext<DisplayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AcceptContext accept() {
			return GetRuleContext<AcceptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyContext multiply() {
			return GetRuleContext<MultiplyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EvaluateContext evaluate() {
			return GetRuleContext<EvaluateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopContext stop() {
			return GetRuleContext<StopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Next_sentenceContext next_sentence() {
			return GetRuleContext<Next_sentenceContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DISPLAY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153;
				display();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154;
				add();
				}
				break;
			case ACCEPT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 155;
				accept();
				}
				break;
			case MULTIPLY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 156;
				multiply();
				}
				break;
			case SUBTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 157;
				subtract();
				}
				break;
			case DIVIDE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 158;
				divide();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 7);
				{
				State = 159;
				@if();
				}
				break;
			case EVALUATE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 160;
				evaluate();
				}
				break;
			case STOP:
				EnterOuterAlt(_localctx, 9);
				{
				State = 161;
				stop();
				}
				break;
			case NEXT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 162;
				next_sentence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisplayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISPLAY() { return GetToken(cobolParser.DISPLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext[] atomic() {
			return GetRuleContexts<AtomicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic(int i) {
			return GetRuleContext<AtomicContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithnoadvancingContext withnoadvancing() {
			return GetRuleContext<WithnoadvancingContext>(0);
		}
		public DisplayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_display; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterDisplay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitDisplay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisplayContext display() {
		DisplayContext _localctx = new DisplayContext(Context, State);
		EnterRule(_localctx, 24, RULE_display);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(DISPLAY);
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 166;
				atomic();
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 42784196460019712L) != 0) );
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 171;
				withnoadvancing();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public IToken _INT;
		public IList<IToken> _additions = new List<IToken>();
		public IToken @base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(cobolParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(cobolParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(cobolParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(cobolParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GivingContext giving() {
			return GetRuleContext<GivingContext>(0);
		}
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 26, RULE_add);
		int _la;
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174;
				Match(ADD);
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 175;
					_localctx._INT = Match(INT);
					_localctx._additions.Add(_localctx._INT);
					}
					}
					State = 178;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==INT );
				State = 180;
				Match(TO);
				State = 181;
				identifiers();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182;
				Match(ADD);
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 183;
					_localctx._INT = Match(INT);
					_localctx._additions.Add(_localctx._INT);
					}
					}
					State = 186;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==INT );
				State = 188;
				Match(TO);
				State = 189;
				_localctx.@base = Match(INT);
				State = 190;
				giving();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyContext : ParserRuleContext {
		public IToken multiplier;
		public IToken @base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(cobolParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(cobolParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(cobolParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(cobolParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext[] identifiers() {
			return GetRuleContexts<IdentifiersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers(int i) {
			return GetRuleContext<IdentifiersContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GivingContext giving() {
			return GetRuleContext<GivingContext>(0);
		}
		public MultiplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiply; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterMultiply(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitMultiply(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyContext multiply() {
		MultiplyContext _localctx = new MultiplyContext(Context, State);
		EnterRule(_localctx, 28, RULE_multiply);
		int _la;
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193;
				Match(MULTIPLY);
				State = 194;
				_localctx.multiplier = Match(INT);
				State = 195;
				Match(BY);
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 196;
					identifiers();
					}
					}
					State = 199;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==IDENTIFIER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201;
				Match(MULTIPLY);
				State = 202;
				_localctx.multiplier = Match(INT);
				State = 203;
				Match(BY);
				State = 204;
				_localctx.@base = Match(INT);
				State = 205;
				giving();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public IToken divisor;
		public IToken @base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(cobolParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(cobolParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(cobolParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(cobolParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext[] identifiers() {
			return GetRuleContexts<IdentifiersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers(int i) {
			return GetRuleContext<IdentifiersContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GivingContext giving() {
			return GetRuleContext<GivingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemainderContext remainder() {
			return GetRuleContext<RemainderContext>(0);
		}
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 30, RULE_divide);
		int _la;
		try {
			State = 228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208;
				Match(DIVIDE);
				State = 209;
				_localctx.divisor = Match(INT);
				State = 210;
				Match(INTO);
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 211;
					identifiers();
					}
					}
					State = 214;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==IDENTIFIER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 216;
				Match(DIVIDE);
				State = 217;
				_localctx.divisor = Match(INT);
				State = 218;
				Match(INTO);
				State = 219;
				_localctx.@base = Match(INT);
				State = 220;
				giving();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 221;
				Match(DIVIDE);
				State = 222;
				_localctx.divisor = Match(INT);
				State = 223;
				Match(INTO);
				State = 224;
				_localctx.@base = Match(INT);
				State = 225;
				giving();
				State = 226;
				remainder();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		public IToken _INT;
		public IList<IToken> _subtractors = new List<IToken>();
		public IToken @base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(cobolParser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(cobolParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(cobolParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(cobolParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GivingContext giving() {
			return GetRuleContext<GivingContext>(0);
		}
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 32, RULE_subtract);
		int _la;
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 230;
				Match(SUBTRACT);
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 231;
					_localctx._INT = Match(INT);
					_localctx._subtractors.Add(_localctx._INT);
					}
					}
					State = 234;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==INT );
				State = 236;
				Match(FROM);
				State = 237;
				identifiers();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238;
				Match(SUBTRACT);
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 239;
					_localctx._INT = Match(INT);
					_localctx._subtractors.Add(_localctx._INT);
					}
					}
					State = 242;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==INT );
				State = 244;
				Match(FROM);
				State = 245;
				_localctx.@base = Match(INT);
				State = 246;
				giving();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AcceptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCEPT() { return GetToken(cobolParser.ACCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext[] identifiers() {
			return GetRuleContexts<IdentifiersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers(int i) {
			return GetRuleContext<IdentifiersContext>(i);
		}
		public AcceptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accept; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterAccept(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitAccept(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccept(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AcceptContext accept() {
		AcceptContext _localctx = new AcceptContext(Context, State);
		EnterRule(_localctx, 34, RULE_accept);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(ACCEPT);
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 250;
				identifiers();
				}
				}
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithnoadvancingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(cobolParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(cobolParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADVANCING() { return GetToken(cobolParser.ADVANCING, 0); }
		public WithnoadvancingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withnoadvancing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterWithnoadvancing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitWithnoadvancing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithnoadvancing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithnoadvancingContext withnoadvancing() {
		WithnoadvancingContext _localctx = new WithnoadvancingContext(Context, State);
		EnterRule(_localctx, 36, RULE_withnoadvancing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			Match(WITH);
			State = 256;
			Match(NO);
			State = 257;
			Match(ADVANCING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(cobolParser.LITERAL, 0); }
		public AtomicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicContext atomic() {
		AtomicContext _localctx = new AtomicContext(Context, State);
		EnterRule(_localctx, 38, RULE_atomic);
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 259;
				identifiers();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 260;
				Match(INT);
				}
				break;
			case LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 261;
				Match(LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GivingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GIVING() { return GetToken(cobolParser.GIVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public GivingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_giving; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterGiving(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitGiving(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGiving(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GivingContext giving() {
		GivingContext _localctx = new GivingContext(Context, State);
		EnterRule(_localctx, 40, RULE_giving);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(GIVING);
			State = 265;
			identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(cobolParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(cobolParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OF() { return GetTokens(cobolParser.OF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF(int i) {
			return GetToken(cobolParser.OF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(cobolParser.INT, 0); }
		public IdentifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterIdentifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitIdentifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiersContext identifiers() {
		IdentifiersContext _localctx = new IdentifiersContext(Context, State);
		EnterRule(_localctx, 42, RULE_identifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(IDENTIFIER);
			State = 272;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 268;
					Match(OF);
					State = 269;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 274;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 275;
				Match(T__0);
				State = 276;
				Match(INT);
				State = 277;
				Match(T__1);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemainderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMAINDER() { return GetToken(cobolParser.REMAINDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public RemainderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remainder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterRemainder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitRemainder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemainder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemainderContext remainder() {
		RemainderContext _localctx = new RemainderContext(Context, State);
		EnterRule(_localctx, 44, RULE_remainder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(REMAINDER);
			State = 281;
			identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _i = new List<StatementContext>();
		public IList<StatementContext> _e = new List<StatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(cobolParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(cobolParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(cobolParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(cobolParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 46, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(IF);
			State = 284;
			boolean(0);
			State = 285;
			Match(THEN);
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 286;
				_localctx._statement = statement();
				_localctx._i.Add(_localctx._statement);
				}
				}
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 985428979089408L) != 0) );
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 291;
				Match(ELSE);
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 292;
					_localctx._statement = statement();
					_localctx._e.Add(_localctx._statement);
					}
					}
					State = 295;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 985428979089408L) != 0) );
				}
			}

			State = 299;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic() {
			return GetRuleContext<AtomicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARITHMETIC_OPERATOR() { return GetToken(cobolParser.ARITHMETIC_OPERATOR, 0); }
		public Arithmetic_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterArithmetic_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitArithmetic_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmetic_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_expressionContext arithmetic_expression() {
		return arithmetic_expression(0);
	}

	private Arithmetic_expressionContext arithmetic_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Arithmetic_expressionContext _localctx = new Arithmetic_expressionContext(Context, _parentState);
		Arithmetic_expressionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_arithmetic_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 302;
			atomic();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 309;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Arithmetic_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
					State = 304;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 305;
					Match(ARITHMETIC_OPERATOR);
					State = 306;
					arithmetic_expression(2);
					}
					} 
				}
				State = 311;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class String_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic() {
			return GetRuleContext<AtomicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_expressionContext[] string_expression() {
			return GetRuleContexts<String_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_expressionContext string_expression(int i) {
			return GetRuleContext<String_expressionContext>(i);
		}
		public String_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterString_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitString_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_expressionContext string_expression() {
		return string_expression(0);
	}

	private String_expressionContext string_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		String_expressionContext _localctx = new String_expressionContext(Context, _parentState);
		String_expressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_string_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 313;
			atomic();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 320;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new String_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_string_expression);
					State = 315;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 316;
					Match(T__2);
					State = 317;
					string_expression(2);
					}
					} 
				}
				State = 322;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(cobolParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(cobolParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARISON_OPERATOR() { return GetToken(cobolParser.COMPARISON_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(cobolParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_OPERATOR() { return GetToken(cobolParser.BOOLEAN_OPERATOR, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		return boolean(0);
	}

	private BooleanContext boolean(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BooleanContext _localctx = new BooleanContext(Context, _parentState);
		BooleanContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_boolean, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
				{
				State = 324;
				Match(TRUE);
				}
				break;
			case FALSE:
				{
				State = 325;
				Match(FALSE);
				}
				break;
			case IDENTIFIER:
			case INT:
			case LITERAL:
				{
				State = 326;
				arithmetic_expression(0);
				State = 327;
				Match(COMPARISON_OPERATOR);
				State = 328;
				arithmetic_expression(0);
				}
				break;
			case NOT:
				{
				State = 330;
				Match(NOT);
				State = 331;
				boolean(2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 339;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BooleanContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_boolean);
					State = 334;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 335;
					Match(BOOLEAN_OPERATOR);
					State = 336;
					boolean(2);
					}
					} 
				}
				State = 341;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_expressionContext string_expression() {
			return GetRuleContext<String_expressionContext>(0);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 54, RULE_expressions);
		try {
			State = 345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 342;
				boolean(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343;
				arithmetic_expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 344;
				string_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvaluateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVALUATE() { return GetToken(cobolParser.EVALUATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext[] expressions() {
			return GetRuleContexts<ExpressionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions(int i) {
			return GetRuleContext<ExpressionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(cobolParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALSO() { return GetTokens(cobolParser.ALSO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALSO(int i) {
			return GetToken(cobolParser.ALSO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_blockContext[] when_block() {
			return GetRuleContexts<When_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_blockContext when_block(int i) {
			return GetRuleContext<When_blockContext>(i);
		}
		public EvaluateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterEvaluate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitEvaluate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluateContext evaluate() {
		EvaluateContext _localctx = new EvaluateContext(Context, State);
		EnterRule(_localctx, 56, RULE_evaluate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(EVALUATE);
			State = 348;
			expressions();
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ALSO) {
				{
				{
				State = 349;
				Match(ALSO);
				State = 350;
				expressions();
				}
				}
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHEN) {
				{
				{
				State = 356;
				when_block();
				}
				}
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 362;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(cobolParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext[] atomic() {
			return GetRuleContexts<AtomicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic(int i) {
			return GetRuleContext<AtomicContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALSO() { return GetTokens(cobolParser.ALSO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALSO(int i) {
			return GetToken(cobolParser.ALSO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHER() { return GetToken(cobolParser.OTHER, 0); }
		public When_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterWhen_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitWhen_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhen_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public When_blockContext when_block() {
		When_blockContext _localctx = new When_blockContext(Context, State);
		EnterRule(_localctx, 58, RULE_when_block);
		int _la;
		try {
			State = 385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364;
				Match(WHEN);
				State = 365;
				atomic();
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ALSO) {
					{
					{
					State = 366;
					Match(ALSO);
					State = 367;
					atomic();
					}
					}
					State = 372;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 373;
					statement();
					}
					}
					State = 376;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 985428979089408L) != 0) );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 378;
				Match(WHEN);
				State = 379;
				Match(OTHER);
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 380;
					statement();
					}
					}
					State = 383;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 985428979089408L) != 0) );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(cobolParser.STOP, 0); }
		public StopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterStop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitStop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopContext stop() {
		StopContext _localctx = new StopContext(Context, State);
		EnterRule(_localctx, 60, RULE_stop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Next_sentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(cobolParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SENTENCE() { return GetToken(cobolParser.SENTENCE, 0); }
		public Next_sentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_next_sentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.EnterNext_sentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcobolListener typedListener = listener as IcobolListener;
			if (typedListener != null) typedListener.ExitNext_sentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcobolVisitor<TResult> typedVisitor = visitor as IcobolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNext_sentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Next_sentenceContext next_sentence() {
		Next_sentenceContext _localctx = new Next_sentenceContext(Context, State);
		EnterRule(_localctx, 62, RULE_next_sentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			Match(NEXT);
			State = 390;
			Match(SENTENCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 24: return arithmetic_expression_sempred((Arithmetic_expressionContext)_localctx, predIndex);
		case 25: return string_expression_sempred((String_expressionContext)_localctx, predIndex);
		case 26: return boolean_sempred((BooleanContext)_localctx, predIndex);
		}
		return true;
	}
	private bool arithmetic_expression_sempred(Arithmetic_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool string_expression_sempred(String_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool boolean_sempred(BooleanContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,55,393,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,3,0,67,8,0,1,0,1,0,1,0,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,5,1,79,8,1,10,1,12,1,82,9,1,1,2,1,2,1,2,1,2,5,2,88,8,
		2,10,2,12,2,91,9,2,1,3,1,3,1,3,1,3,3,3,97,8,3,1,3,1,3,1,3,3,3,102,8,3,
		1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,3,7,118,8,7,1,
		7,1,7,4,7,122,8,7,11,7,12,7,123,1,8,1,8,4,8,128,8,8,11,8,12,8,129,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,141,8,9,1,10,1,10,3,10,145,8,10,1,
		10,4,10,148,8,10,11,10,12,10,149,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,3,11,164,8,11,1,12,1,12,4,12,168,8,12,11,12,12,
		12,169,1,12,3,12,173,8,12,1,13,1,13,4,13,177,8,13,11,13,12,13,178,1,13,
		1,13,1,13,1,13,4,13,185,8,13,11,13,12,13,186,1,13,1,13,1,13,3,13,192,8,
		13,1,14,1,14,1,14,1,14,4,14,198,8,14,11,14,12,14,199,1,14,1,14,1,14,1,
		14,1,14,3,14,207,8,14,1,15,1,15,1,15,1,15,4,15,213,8,15,11,15,12,15,214,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,229,8,
		15,1,16,1,16,4,16,233,8,16,11,16,12,16,234,1,16,1,16,1,16,1,16,4,16,241,
		8,16,11,16,12,16,242,1,16,1,16,1,16,3,16,248,8,16,1,17,1,17,4,17,252,8,
		17,11,17,12,17,253,1,18,1,18,1,18,1,18,1,19,1,19,1,19,3,19,263,8,19,1,
		20,1,20,1,20,1,21,1,21,1,21,5,21,271,8,21,10,21,12,21,274,9,21,1,21,1,
		21,1,21,3,21,279,8,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,4,23,288,8,23,
		11,23,12,23,289,1,23,1,23,4,23,294,8,23,11,23,12,23,295,3,23,298,8,23,
		1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,5,24,308,8,24,10,24,12,24,311,
		9,24,1,25,1,25,1,25,1,25,1,25,1,25,5,25,319,8,25,10,25,12,25,322,9,25,
		1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,333,8,26,1,26,1,26,1,
		26,5,26,338,8,26,10,26,12,26,341,9,26,1,27,1,27,1,27,3,27,346,8,27,1,28,
		1,28,1,28,1,28,5,28,352,8,28,10,28,12,28,355,9,28,1,28,5,28,358,8,28,10,
		28,12,28,361,9,28,1,28,1,28,1,29,1,29,1,29,1,29,5,29,369,8,29,10,29,12,
		29,372,9,29,1,29,4,29,375,8,29,11,29,12,29,376,1,29,1,29,1,29,4,29,382,
		8,29,11,29,12,29,383,3,29,386,8,29,1,30,1,30,1,31,1,31,1,31,1,31,0,3,48,
		50,52,32,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,56,58,60,62,0,0,417,0,64,1,0,0,0,2,71,1,0,0,0,4,83,1,
		0,0,0,6,92,1,0,0,0,8,105,1,0,0,0,10,107,1,0,0,0,12,111,1,0,0,0,14,114,
		1,0,0,0,16,125,1,0,0,0,18,140,1,0,0,0,20,144,1,0,0,0,22,163,1,0,0,0,24,
		165,1,0,0,0,26,191,1,0,0,0,28,206,1,0,0,0,30,228,1,0,0,0,32,247,1,0,0,
		0,34,249,1,0,0,0,36,255,1,0,0,0,38,262,1,0,0,0,40,264,1,0,0,0,42,267,1,
		0,0,0,44,280,1,0,0,0,46,283,1,0,0,0,48,301,1,0,0,0,50,312,1,0,0,0,52,332,
		1,0,0,0,54,345,1,0,0,0,56,347,1,0,0,0,58,385,1,0,0,0,60,387,1,0,0,0,62,
		389,1,0,0,0,64,66,3,2,1,0,65,67,3,4,2,0,66,65,1,0,0,0,66,67,1,0,0,0,67,
		68,1,0,0,0,68,69,3,14,7,0,69,70,5,0,0,1,70,1,1,0,0,0,71,72,5,8,0,0,72,
		73,5,9,0,0,73,80,5,54,0,0,74,75,5,51,0,0,75,76,5,54,0,0,76,77,5,55,0,0,
		77,79,5,54,0,0,78,74,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,
		81,3,1,0,0,0,82,80,1,0,0,0,83,84,5,27,0,0,84,85,5,9,0,0,85,89,5,54,0,0,
		86,88,3,6,3,0,87,86,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,
		90,5,1,0,0,0,91,89,1,0,0,0,92,93,3,8,4,0,93,96,5,51,0,0,94,97,3,10,5,0,
		95,97,3,12,6,0,96,94,1,0,0,0,96,95,1,0,0,0,96,97,1,0,0,0,97,101,1,0,0,
		0,98,99,5,10,0,0,99,100,5,52,0,0,100,102,5,11,0,0,101,98,1,0,0,0,101,102,
		1,0,0,0,102,103,1,0,0,0,103,104,5,54,0,0,104,7,1,0,0,0,105,106,5,52,0,
		0,106,9,1,0,0,0,107,108,5,12,0,0,108,109,5,13,0,0,109,110,5,4,0,0,110,
		11,1,0,0,0,111,112,5,21,0,0,112,113,3,42,21,0,113,13,1,0,0,0,114,115,5,
		14,0,0,115,117,5,9,0,0,116,118,3,16,8,0,117,116,1,0,0,0,117,118,1,0,0,
		0,118,119,1,0,0,0,119,121,5,54,0,0,120,122,3,20,10,0,121,120,1,0,0,0,122,
		123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,15,1,0,0,0,125,127,5,15,
		0,0,126,128,3,18,9,0,127,126,1,0,0,0,128,129,1,0,0,0,129,127,1,0,0,0,129,
		130,1,0,0,0,130,17,1,0,0,0,131,132,5,16,0,0,132,133,5,18,0,0,133,141,3,
		42,21,0,134,135,5,16,0,0,135,136,5,19,0,0,136,141,3,38,19,0,137,138,5,
		16,0,0,138,139,5,20,0,0,139,141,3,38,19,0,140,131,1,0,0,0,140,134,1,0,
		0,0,140,137,1,0,0,0,141,19,1,0,0,0,142,143,5,51,0,0,143,145,5,54,0,0,144,
		142,1,0,0,0,144,145,1,0,0,0,145,147,1,0,0,0,146,148,3,22,11,0,147,146,
		1,0,0,0,148,149,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,151,1,0,0,
		0,151,152,5,54,0,0,152,21,1,0,0,0,153,164,3,24,12,0,154,164,3,26,13,0,
		155,164,3,34,17,0,156,164,3,28,14,0,157,164,3,32,16,0,158,164,3,30,15,
		0,159,164,3,46,23,0,160,164,3,56,28,0,161,164,3,60,30,0,162,164,3,62,31,
		0,163,153,1,0,0,0,163,154,1,0,0,0,163,155,1,0,0,0,163,156,1,0,0,0,163,
		157,1,0,0,0,163,158,1,0,0,0,163,159,1,0,0,0,163,160,1,0,0,0,163,161,1,
		0,0,0,163,162,1,0,0,0,164,23,1,0,0,0,165,167,5,22,0,0,166,168,3,38,19,
		0,167,166,1,0,0,0,168,169,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,
		172,1,0,0,0,171,173,3,36,18,0,172,171,1,0,0,0,172,173,1,0,0,0,173,25,1,
		0,0,0,174,176,5,28,0,0,175,177,5,52,0,0,176,175,1,0,0,0,177,178,1,0,0,
		0,178,176,1,0,0,0,178,179,1,0,0,0,179,180,1,0,0,0,180,181,5,29,0,0,181,
		192,3,42,21,0,182,184,5,28,0,0,183,185,5,52,0,0,184,183,1,0,0,0,185,186,
		1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,188,1,0,0,0,188,189,5,29,0,
		0,189,190,5,52,0,0,190,192,3,40,20,0,191,174,1,0,0,0,191,182,1,0,0,0,192,
		27,1,0,0,0,193,194,5,34,0,0,194,195,5,52,0,0,195,197,5,16,0,0,196,198,
		3,42,21,0,197,196,1,0,0,0,198,199,1,0,0,0,199,197,1,0,0,0,199,200,1,0,
		0,0,200,207,1,0,0,0,201,202,5,34,0,0,202,203,5,52,0,0,203,204,5,16,0,0,
		204,205,5,52,0,0,205,207,3,40,20,0,206,193,1,0,0,0,206,201,1,0,0,0,207,
		29,1,0,0,0,208,209,5,36,0,0,209,210,5,52,0,0,210,212,5,30,0,0,211,213,
		3,42,21,0,212,211,1,0,0,0,213,214,1,0,0,0,214,212,1,0,0,0,214,215,1,0,
		0,0,215,229,1,0,0,0,216,217,5,36,0,0,217,218,5,52,0,0,218,219,5,30,0,0,
		219,220,5,52,0,0,220,229,3,40,20,0,221,222,5,36,0,0,222,223,5,52,0,0,223,
		224,5,30,0,0,224,225,5,52,0,0,225,226,3,40,20,0,226,227,3,44,22,0,227,
		229,1,0,0,0,228,208,1,0,0,0,228,216,1,0,0,0,228,221,1,0,0,0,229,31,1,0,
		0,0,230,232,5,35,0,0,231,233,5,52,0,0,232,231,1,0,0,0,233,234,1,0,0,0,
		234,232,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,237,5,17,0,0,237,248,
		3,42,21,0,238,240,5,35,0,0,239,241,5,52,0,0,240,239,1,0,0,0,241,242,1,
		0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,244,1,0,0,0,244,245,5,17,0,0,
		245,246,5,52,0,0,246,248,3,40,20,0,247,230,1,0,0,0,247,238,1,0,0,0,248,
		33,1,0,0,0,249,251,5,33,0,0,250,252,3,42,21,0,251,250,1,0,0,0,252,253,
		1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,35,1,0,0,0,255,256,5,24,0,
		0,256,257,5,25,0,0,257,258,5,26,0,0,258,37,1,0,0,0,259,263,3,42,21,0,260,
		263,5,52,0,0,261,263,5,55,0,0,262,259,1,0,0,0,262,260,1,0,0,0,262,261,
		1,0,0,0,263,39,1,0,0,0,264,265,5,31,0,0,265,266,3,42,21,0,266,41,1,0,0,
		0,267,272,5,51,0,0,268,269,5,23,0,0,269,271,5,51,0,0,270,268,1,0,0,0,271,
		274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,278,1,0,0,0,274,272,1,
		0,0,0,275,276,5,1,0,0,276,277,5,52,0,0,277,279,5,2,0,0,278,275,1,0,0,0,
		278,279,1,0,0,0,279,43,1,0,0,0,280,281,5,32,0,0,281,282,3,42,21,0,282,
		45,1,0,0,0,283,284,5,37,0,0,284,285,3,52,26,0,285,287,5,39,0,0,286,288,
		3,22,11,0,287,286,1,0,0,0,288,289,1,0,0,0,289,287,1,0,0,0,289,290,1,0,
		0,0,290,297,1,0,0,0,291,293,5,38,0,0,292,294,3,22,11,0,293,292,1,0,0,0,
		294,295,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,291,
		1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,300,5,40,0,0,300,47,1,0,0,
		0,301,302,6,24,-1,0,302,303,3,38,19,0,303,309,1,0,0,0,304,305,10,1,0,0,
		305,306,5,5,0,0,306,308,3,48,24,2,307,304,1,0,0,0,308,311,1,0,0,0,309,
		307,1,0,0,0,309,310,1,0,0,0,310,49,1,0,0,0,311,309,1,0,0,0,312,313,6,25,
		-1,0,313,314,3,38,19,0,314,320,1,0,0,0,315,316,10,1,0,0,316,317,5,3,0,
		0,317,319,3,50,25,2,318,315,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,
		321,1,0,0,0,321,51,1,0,0,0,322,320,1,0,0,0,323,324,6,26,-1,0,324,333,5,
		41,0,0,325,333,5,42,0,0,326,327,3,48,24,0,327,328,5,6,0,0,328,329,3,48,
		24,0,329,333,1,0,0,0,330,331,5,43,0,0,331,333,3,52,26,2,332,323,1,0,0,
		0,332,325,1,0,0,0,332,326,1,0,0,0,332,330,1,0,0,0,333,339,1,0,0,0,334,
		335,10,1,0,0,335,336,5,7,0,0,336,338,3,52,26,2,337,334,1,0,0,0,338,341,
		1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,53,1,0,0,0,341,339,1,0,0,0,
		342,346,3,52,26,0,343,346,3,48,24,0,344,346,3,50,25,0,345,342,1,0,0,0,
		345,343,1,0,0,0,345,344,1,0,0,0,346,55,1,0,0,0,347,348,5,47,0,0,348,353,
		3,54,27,0,349,350,5,45,0,0,350,352,3,54,27,0,351,349,1,0,0,0,352,355,1,
		0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,359,1,0,0,0,355,353,1,0,0,0,
		356,358,3,58,29,0,357,356,1,0,0,0,358,361,1,0,0,0,359,357,1,0,0,0,359,
		360,1,0,0,0,360,362,1,0,0,0,361,359,1,0,0,0,362,363,5,40,0,0,363,57,1,
		0,0,0,364,365,5,44,0,0,365,370,3,38,19,0,366,367,5,45,0,0,367,369,3,38,
		19,0,368,366,1,0,0,0,369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,
		374,1,0,0,0,372,370,1,0,0,0,373,375,3,22,11,0,374,373,1,0,0,0,375,376,
		1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,386,1,0,0,0,378,379,5,44,0,
		0,379,381,5,46,0,0,380,382,3,22,11,0,381,380,1,0,0,0,382,383,1,0,0,0,383,
		381,1,0,0,0,383,384,1,0,0,0,384,386,1,0,0,0,385,364,1,0,0,0,385,378,1,
		0,0,0,386,59,1,0,0,0,387,388,5,48,0,0,388,61,1,0,0,0,389,390,5,49,0,0,
		390,391,5,50,0,0,391,63,1,0,0,0,42,66,80,89,96,101,117,123,129,140,144,
		149,163,169,172,178,186,191,199,206,214,228,234,242,247,253,262,272,278,
		289,295,297,309,320,332,339,345,353,359,370,376,383,385
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
